/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	module.exports = "---\nauthor: Jonathan Soeder\ntype: testcase\n---\n\n# Skypager.js\n\nWelcome to the documentation and test suite for Skypager which I\nlike to call the cloud writing framework.  Skypager makes it easy to\nbuild data driven reactive websites on top of the many forms of constantly\nevolving streams of communication that humans engage in on the internet.\n\nA Skypager project contains writing about certain abstract set of Things, or more formally Entities.  These entities usually exist in or are referred to by some other document, system, or external API.  A lot of the time these Entities may change over time.  \n\nSkypager provides an easy way for building functionality around these entities and their relationships to each other, and to incorporate other knowledge data related to these Entities in that exist in other systems.\n\n## Setup\n\nIf you are reading this page, this has been generated by Skypager.  It\nconsists of individual markdown files that correspond to important areas\nof the project's internals.  These markdown files follow a particular\nstructure with respect to the headings they use. This allows us to parse\ntheir contents and use them to build more dynamic and interactive web\ncontent than we would be able to with just traditional markdown. \n\nThis documentation is both API documentation for the project and runnable test code.\n\n## Specifications\n\n### Skypager Projects can be required like any common.js document \n\n```javascript\nproject.should.have.property('uri')\nproject.should.have.property('dirname', 'documentation')\n```\n\n### Skypager reads a collection of files and turns them into javascript \n\nSkypager projects have a special structure.  Different folders are used to store different types of files which serve a different purpose. \n\n#### Assets\n\nWe start with the project assets themselves which would be anything from markdown documents, static data sources in JSON, SVG Diagrams, excel spreadsheets: anything which can be read and parsed and turned into javascript data. \n\n```javascript\nproject.paths.should.have.property('assets')\nproject.paths.should.have.property('documents')\nproject.paths.should.have.property('data_sources')\n```\n\nThese assets are available to the project as content which can be\ndirectly rendered on a website, in the most simplest case.  \n\n```javascript\nproject.content.documents.should.have.property('assets')\nproject.content.assets.should.have.property('assets')\nproject.content.data_sources.should.have.property('assets')\n```\n\nHowever it is when we parse these things and use them to power our entity models, that we can do really interesting things with them.  The helper system allows us to define the way this content can be used to power these kinds of applications. \n\n#### Helpers\n\nHelpers are different types of javascript files which an be used to\nextend the functionality of a Skypager Project, control how it is\nrendered, how it can observe or interact with the outside world to keep\nthe different Entities referred to in the project in sync. \n\nA project can include its own custom helpers directly.\n\n```javascript\nproject.paths.should.have.property('actions')\nproject.paths.should.have.property('exporters')\nproject.paths.should.have.property('importers')\nproject.paths.should.have.property('models')\nproject.paths.should.have.property('plugins')\nproject.paths.should.have.property('renderers')\n```\n### Skypager ships with a few of its own helpers\n\nSkypager also ships with a bunch of its own helpers for common use cases.\n\nUsing helpers internally is a clean way of organizing the many different\nparts of our code base.\n\n```javascript\nskypager.helpers.exporters.assets.should.not.have.property('length',0)\nskypager.helpers.importers.assets.should.not.have.property('length',0)\nskypager.helpers.models.assets.should.not.have.property('length',0)\nskypager.helpers.renderers.assets.should.not.have.property('length',0)\n```\n\n### Skypager ships with a few of its own plugins.\n\n```javascript\nskypager.helpers.plugins.should.have.property('assets')\nskypager.helpers.plugins.assets.should.not.have.property('length',0)\n```\n\nThese can be used by any project, and provide additional helpers.\n\n\n"

/***/ }
/******/ ]);