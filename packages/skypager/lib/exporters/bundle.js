'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BrowserBundle = BrowserBundle;
exports.AssetExporter = AssetExporter;
exports.ProjectExporter = ProjectExporter;
function BrowserBundle() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var project = options.project = this;

  if (options.asset && options.collection) {
    return AssetExporter.apply(project, arguments);
  }

  if (options.project) {
    return ProjectExporter.apply(project, arguments);
  }
}

function AssetExporter() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var callback = arguments[1];

  var fs = require('fs');
  var exists = fs.existsSync;
  var project = this;
  var asset = options.asset;

  if (!asset.raw) {
    asset.runImporter('disk', { sync: true });
  }

  var requirePath = asset.fingerprint ? asset.paths.project.replace(/\.\w+$/, '-' + asset.fingerprint + '.js') : asset.paths.project.replace(/\.\w+$/, '.js');
  var outPath = project.path('build', 'bundle', requirePath);

  var write = fs.writeFileSync;
  var mkdir = require('mkdirp').sync;
  var dirname = require('path').dirname;

  var output = {
    id: asset.id,
    paths: asset.paths,
    assetGroup: asset.assetGroup,
    fingerprint: asset.fingerprint
  };

  if (asset.assetGroup === 'data_sources') {
    output = Object.assign(output, {
      data: asset.data
    });
  }

  if (asset.assetGroup === 'documents') {
    output = Object.assign(output, {
      markdown: asset.raw,
      ast: asset.indexed,
      indexes: asset.indexes,
      html: asset.html.content
    });
  }

  mkdir(dirname(outPath));
  write(outPath, 'var data = module.exports = ' + JSON.stringify(output) + ';');

  return {
    requirePath: requirePath
  };
}

function ProjectExporter() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var callback = arguments[1];

  var project = options.project;

  var mkdir = require('mkdirp').sync;

  var keys = Object.keys(project.content);

  var src = ['exports = module.exports = {}'];

  keys.forEach(function (key) {
    var collection = project.content[key];

    src.push('var _' + key + ' = exports.' + key + ' = {};');

    collection.forEach(function (asset) {
      var _AssetExporter$call = AssetExporter.call(project, { asset: asset, options: options, key: key });

      var requirePath = _AssetExporter$call.requirePath;

      src.push('_' + key + '[\'' + asset.id + '\'] = require(\'./' + requirePath + '\');');
    });
  });

  var write = require('fs').writeFileSync;
  var content = src.join("\n");

  write(project.path('build', 'bundle', 'index.js'), content, 'utf8');

  return content;
}

exports.default = BrowserBundle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBvcnRlcnMvYnVuZGxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O1FBQWdCLGFBQWEsR0FBYixhQUFhO1FBWWIsYUFBYSxHQUFiLGFBQWE7UUErQ2IsZUFBZSxHQUFmLGVBQWU7QUEzRHhCLFNBQVMsYUFBYSxHQUFnQjtNQUFkLE9BQU8seURBQUcsRUFBRTs7QUFDekMsTUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7O0FBRXBDLE1BQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO0FBQ3ZDLFdBQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7R0FDL0M7O0FBRUQsTUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO0FBQ25CLFdBQU8sZUFBZSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7R0FDakQ7Q0FDRjs7QUFFTSxTQUFTLGFBQWEsR0FBMEI7TUFBeEIsT0FBTyx5REFBRyxFQUFFO01BQUUsUUFBUTs7QUFDbkQsTUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3RCLE1BQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUE7QUFDMUIsTUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFBO01BQ1osS0FBSyxHQUFLLE9BQU8sQ0FBakIsS0FBSzs7QUFFWCxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtBQUNkLFNBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUE7R0FDeEM7O0FBRUQsTUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxRQUFNLEtBQUssQ0FBQyxXQUFXLFNBQU8sR0FBRyxLQUFLLENBQUMsS0FB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SUFBSSxDQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFBOztBQUVqRSxTQUFPLE9BQU8sQ0FBQTtDQUNmOztrQkFFYyxhQUFhIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBCcm93c2VyQnVuZGxlIChvcHRpb25zID0ge30pIHtcbiAgbGV0IHByb2plY3QgPSBvcHRpb25zLnByb2plY3QgPSB0aGlzXG5cbiAgaWYgKG9wdGlvbnMuYXNzZXQgJiYgb3B0aW9ucy5jb2xsZWN0aW9uKSB7XG4gICAgcmV0dXJuIEFzc2V0RXhwb3J0ZXIuYXBwbHkocHJvamVjdCwgYXJndW1lbnRzKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMucHJvamVjdCkge1xuICAgIHJldHVybiBQcm9qZWN0RXhwb3J0ZXIuYXBwbHkocHJvamVjdCwgYXJndW1lbnRzKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBc3NldEV4cG9ydGVyIChvcHRpb25zID0ge30sIGNhbGxiYWNrKSB7XG4gIGxldCBmcyA9IHJlcXVpcmUoJ2ZzJylcbiAgbGV0IGV4aXN0cyA9IGZzLmV4aXN0c1N5bmNcbiAgbGV0IHByb2plY3QgPSB0aGlzXG4gIGxldCB7IGFzc2V0IH0gPSBvcHRpb25zXG5cbiAgaWYgKCFhc3NldC5yYXcpIHtcbiAgICBhc3NldC5ydW5JbXBvcnRlcignZGlzaycsIHtzeW5jOiB0cnVlfSlcbiAgfVxuXG4gIGxldCByZXF1aXJlUGF0aCA9IGFzc2V0LmZpbmdlcnByaW50ID8gYXNzZXQucGF0aHMucHJvamVjdC5yZXBsYWNlKC9cXC5cXHcrJC8sYC0keyBhc3NldC5maW5nZXJwcmludCB9LmpzYCkgOiBhc3NldC5wYXRocy5wcm9qZWN0LnJlcGxhY2UoL1xcLlxcdyskLywnLmpzJylcbiAgbGV0IG91dFBhdGggPSBwcm9qZWN0LnBhdGgoJ2J1aWxkJywnYnVuZGxlJywgcmVxdWlyZVBhdGgpXG5cbiAgbGV0IHdyaXRlID0gZnMud3JpdGVGaWxlU3luY1xuICBsZXQgbWtkaXIgPSByZXF1aXJlKCdta2RpcnAnKS5zeW5jXG4gIGxldCBkaXJuYW1lID0gcmVxdWlyZSgncGF0aCcpLmRpcm5hbWVcblxuICBsZXQgb3V0cHV0ID0ge1xuICAgIGlkOiBhc3NldC5pZCxcbiAgICBwYXRoczogYXNzZXQucGF0aHMsXG4gICAgYXNzZXRHcm91cDogYXNzZXQuYXNzZXRHcm91cCxcbiAgICBmaW5nZXJwcmludDogYXNzZXQuZmluZ2VycHJpbnRcbiAgfVxuXG4gIGlmIChhc3NldC5hc3NldEdyb3VwID09PSAnZGF0YV9zb3VyY2VzJykge1xuICAgIG91dHB1dCA9IE9iamVjdC5hc3NpZ24ob3V0cHV0LCB7XG4gICAgICBkYXRhOiBhc3NldC5kYXRhXG4gICAgfSlcbiAgfVxuXG4gIGlmIChhc3NldC5hc3NldEdyb3VwID09PSAnZG9jdW1lbnRzJykge1xuICAgIG91dHB1dCA9IE9iamVjdC5hc3NpZ24ob3V0cHV0LCB7XG4gICAgICBtYXJrZG93bjogYXNzZXQucmF3LFxuICAgICAgYXN0OiBhc3NldC5pbmRleGVkLFxuICAgICAgaW5kZXhlczogYXNzZXQuaW5kZXhlcyxcbiAgICAgIGh0bWw6IGFzc2V0Lmh0bWwuY29udGVudFxuICAgIH0pXG4gIH1cblxuICBta2RpcihkaXJuYW1lKG91dFBhdGgpKVxuICB3cml0ZShvdXRQYXRoLCBgdmFyIGRhdGEgPSBtb2R1bGUuZXhwb3J0cyA9ICR7IEpTT04uc3RyaW5naWZ5KG91dHB1dCkgfTtgKVxuXG4gIHJldHVybiB7XG4gICAgcmVxdWlyZVBhdGhcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gUHJvamVjdEV4cG9ydGVyIChvcHRpb25zID0ge30sIGNhbGxiYWNrKSB7XG4gIGxldCBwcm9qZWN0ID0gb3B0aW9ucy5wcm9qZWN0XG5cbiAgbGV0IG1rZGlyID0gcmVxdWlyZSgnbWtkaXJwJykuc3luY1xuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9qZWN0LmNvbnRlbnQpXG5cbiAgbGV0IHNyYyA9IFtgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge31gXVxuXG4gIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgIGxldCBjb2xsZWN0aW9uID0gcHJvamVjdC5jb250ZW50W2tleV1cblxuICAgIHNyYy5wdXNoKGB2YXIgXyR7IGtleSB9ID0gZXhwb3J0cy4keyBrZXkgfSA9IHt9O2ApXG5cbiAgICBjb2xsZWN0aW9uLmZvckVhY2goYXNzZXQgPT4ge1xuICAgICAgbGV0IHsgcmVxdWlyZVBhdGggfSA9IEFzc2V0RXhwb3J0ZXIuY2FsbChwcm9qZWN0LCB7IGFzc2V0LCBvcHRpb25zLCBrZXkgfSlcbiAgICAgIHNyYy5wdXNoKGBfJHsga2V5IH1bJyR7IGFzc2V0LmlkIH0nXSA9IHJlcXVpcmUoJy4vJHtyZXF1aXJlUGF0aH0nKTtgKVxuICAgIH0pXG4gIH0pXG5cbiAgbGV0IHdyaXRlID0gcmVxdWlyZSgnZnMnKS53cml0ZUZpbGVTeW5jXG4gIHZhciBjb250ZW50ID0gc3JjLmpvaW4oXCJcXG5cIilcblxuICB3cml0ZShwcm9qZWN0LnBhdGgoJ2J1aWxkJywnYnVuZGxlJywnaW5kZXguanMnKSwgY29udGVudCwgJ3V0ZjgnKVxuXG4gIHJldHVybiBjb250ZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJCdW5kbGVcbiJdfQ==