'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BrowserBundle = BrowserBundle;
exports.AssetExporter = AssetExporter;
exports.ProjectExporter = ProjectExporter;
function BrowserBundle() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var project = options.project = this;

  if (options.asset && options.collection) {
    return AssetExporter.apply(project, arguments);
  }

  if (options.project) {
    return ProjectExporter.apply(project, arguments);
  }
}

function AssetExporter() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var callback = arguments[1];

  var write = require('fs').writeFileSync;
  var mkdir = require('mkdirp').sync;
  var dirname = require('path').dirname;

  var project = this;
  var asset = options.asset;
  var inPath = options.inPath;
  var outPath = options.outPath;

  if (!asset.raw) {
    asset.runImporter('disk', { sync: true });
  }

  var output = {
    id: asset.id,
    paths: asset.paths,
    assetGroup: asset.assetGroup
  };

  if (asset.assetGroup === 'data_sources') {
    output = Object.assign(output, {
      data: asset.data
    });
  }

  if (asset.assetGroup === 'documents') {
    output = Object.assign(output, {
      markdown: asset.raw,
      ast: asset.indexed,
      indexes: asset.indexes,
      html: asset.html.content
    });
  }

  mkdir(dirname(outPath));
  write(outPath, 'var data = module.exports = ' + JSON.stringify(output) + ';');

  return outPath;
}

function ProjectExporter() {
  var _this = this;

  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var callback = arguments[1];

  var project = options.project;

  project.allAssets.forEach(function (asset) {
    try {} catch (error) {
      console.log('error importing asset: ' + asset.id);
      throw error;
    }
  });

  var mkdir = require('mkdirp').sync;

  var keys = Object.keys(project.content);

  keys.forEach(function (key) {
    mkdir(project.path('build', 'bundle', key));
  });

  var src = ['exports = module.exports = {}'];

  keys.forEach(function (key) {
    var collection = project.content[key];

    src.push('var _' + key + ' = exports.' + key + ' = {};');

    collection.forEach(function (asset) {
      options.asset = asset;

      var requirePath = AssetExporter.call(_this, {
        outPath: project.path('build', 'bundle', asset.paths.project.replace(/\.\w+$/, '.js')),
        inPath: asset.paths.project,
        asset: asset
      });

      src.push('_' + key + '[\'' + asset.id + '\'] = require(\'' + requirePath + '\');');
    });
  });

  var write = require('fs').writeFileSync;
  var content = src.join("\n");

  write(project.path('build', 'bundle', 'index.js'), content, 'utf8');

  return content;
}

exports.default = BrowserBundle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBvcnRlcnMvYnVuZGxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O1FBQWdCLGFBQWEsR0FBYixhQUFhO1FBWWIsYUFBYSxHQUFiLGFBQWE7UUF1Q2IsZUFBZSxHQUFmLGVBQWU7QUFuRHhCLFNBQVMsYUFBYSxHQUFnQjtNQUFkLE9BQU8seURBQUcsRUFBRTs7QUFDekMsTUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7O0FBRXBDLE1BQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO0FBQ3ZDLFdBQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7R0FDL0M7O0FBRUQsTUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO0FBQ25CLFdBQU8sZUFBZSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7R0FDakQ7Q0FDRjs7QUFFTSxTQUFTLGFBQWEsR0FBMEI7TUFBeEIsT0FBTyx5REFBRyxFQUFFO01BQUUsUUFBUTs7QUFDbkQsTUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQTtBQUN2QyxNQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ2xDLE1BQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUE7O0FBRXJDLE1BQUksT0FBTyxHQUFHLElBQUksQ0FBQTtNQUNaLEtBQUssR0FBc0IsT0FBTyxDQUFsQyxLQUFLO01BQUUsTUFBTSxHQUFjLE9BQU8sQ0FBM0IsTUFBTTtNQUFFLE9BQU8sR0FBSyxPQUFPLENBQW5CLE9BQU87O0FBRTVCLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO0FBQ2QsU0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFD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Q0FBQTs7QUFFRixNQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFBO0FBQ3ZDLE1BQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7O0FBRTVCLE9BQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFBOztBQUVqRSxTQUFPLE9BQU8sQ0FBQTtDQUNmOztrQkFFYyxhQUFhIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBCcm93c2VyQnVuZGxlIChvcHRpb25zID0ge30pIHtcbiAgbGV0IHByb2plY3QgPSBvcHRpb25zLnByb2plY3QgPSB0aGlzXG5cbiAgaWYgKG9wdGlvbnMuYXNzZXQgJiYgb3B0aW9ucy5jb2xsZWN0aW9uKSB7XG4gICAgcmV0dXJuIEFzc2V0RXhwb3J0ZXIuYXBwbHkocHJvamVjdCwgYXJndW1lbnRzKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMucHJvamVjdCkge1xuICAgIHJldHVybiBQcm9qZWN0RXhwb3J0ZXIuYXBwbHkocHJvamVjdCwgYXJndW1lbnRzKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBc3NldEV4cG9ydGVyIChvcHRpb25zID0ge30sIGNhbGxiYWNrKSB7XG4gIGxldCB3cml0ZSA9IHJlcXVpcmUoJ2ZzJykud3JpdGVGaWxlU3luY1xuICBsZXQgbWtkaXIgPSByZXF1aXJlKCdta2RpcnAnKS5zeW5jXG4gIGxldCBkaXJuYW1lID0gcmVxdWlyZSgncGF0aCcpLmRpcm5hbWVcblxuICBsZXQgcHJvamVjdCA9IHRoaXNcbiAgbGV0IHsgYXNzZXQsIGluUGF0aCwgb3V0UGF0aCB9ID0gb3B0aW9uc1xuXG4gIGlmICghYXNzZXQucmF3KSB7XG4gICAgYXNzZXQucnVuSW1wb3J0ZXIoJ2Rpc2snLCB7c3luYzogdHJ1ZX0pXG4gIH1cblxuICBsZXQgb3V0cHV0ID0ge1xuICAgIGlkOiBhc3NldC5pZCxcbiAgICBwYXRoczogYXNzZXQucGF0aHMsXG4gICAgYXNzZXRHcm91cDogYXNzZXQuYXNzZXRHcm91cFxuICB9XG5cbiAgaWYgKGFzc2V0LmFzc2V0R3JvdXAgPT09ICdkYXRhX3NvdXJjZXMnKSB7XG4gICAgb3V0cHV0ID0gT2JqZWN0LmFzc2lnbihvdXRwdXQsIHtcbiAgICAgIGRhdGE6IGFzc2V0LmRhdGFcbiAgICB9KVxuICB9XG5cbiAgaWYgKGFzc2V0LmFzc2V0R3JvdXAgPT09ICdkb2N1bWVudHMnKSB7XG4gICAgb3V0cHV0ID0gT2JqZWN0LmFzc2lnbihvdXRwdXQsIHtcbiAgICAgIG1hcmtkb3duOiBhc3NldC5yYXcsXG4gICAgICBhc3Q6IGFzc2V0LmluZGV4ZWQsXG4gICAgICBpbmRleGVzOiBhc3NldC5pbmRleGVzLFxuICAgICAgaHRtbDogYXNzZXQuaHRtbC5jb250ZW50XG4gICAgfSlcbiAgfVxuXG4gIG1rZGlyKGRpcm5hbWUob3V0UGF0aCkpXG4gIHdyaXRlKG91dFBhdGgsIGB2YXIgZGF0YSA9IG1vZHVsZS5leHBvcnRzID0gJHsgSlNPTi5zdHJpbmdpZnkob3V0cHV0KSB9O2ApXG5cbiAgcmV0dXJuIG91dFBhdGhcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFByb2plY3RFeHBvcnRlciAob3B0aW9ucyA9IHt9LCBjYWxsYmFjaykge1xuICBsZXQgcHJvamVjdCA9IG9wdGlvbnMucHJvamVjdFxuXG4gIHByb2plY3QuYWxsQXNzZXRzLmZvckVhY2goYXNzZXQgPT4ge1xuICAgIHRyeSB7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBlcnJvciBpbXBvcnRpbmcgYXNzZXQ6ICR7IGFzc2V0LmlkIH1gKVxuICAgICAgdGhyb3coZXJyb3IpXG4gICAgfVxuICB9KVxuXG4gIGxldCBta2RpciA9IHJlcXVpcmUoJ21rZGlycCcpLnN5bmNcblxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvamVjdC5jb250ZW50KVxuXG4gIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgIG1rZGlyKHByb2plY3QucGF0aCgnYnVpbGQnLCAnYnVuZGxlJywga2V5KSlcbiAgfSlcblxuICBsZXQgc3JjID0gW2BleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB7fWBdXG5cbiAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgbGV0IGNvbGxlY3Rpb24gPSBwcm9qZWN0LmNvbnRlbnRba2V5XVxuXG4gICAgc3JjLnB1c2goYHZhciBfJHsga2V5IH0gPSBleHBvcnRzLiR7IGtleSB9ID0ge307YClcblxuICAgIGNvbGxlY3Rpb24uZm9yRWFjaChhc3NldCA9PiB7XG4gICAgICBvcHRpb25zLmFzc2V0ID0gYXNzZXRcblxuICAgICAgdmFyIHJlcXVpcmVQYXRoID0gQXNzZXRFeHBvcnRlci5jYWxsKHRoaXMsIHtcbiAgICAgICAgb3V0UGF0aDogcHJvamVjdC5wYXRoKCdidWlsZCcsICdidW5kbGUnLCBhc3NldC5wYXRocy5wcm9qZWN0LnJlcGxhY2UoL1xcLlxcdyskLywnLmpzJykpLFxuICAgICAgICBpblBhdGg6IGFzc2V0LnBhdGhzLnByb2plY3QsXG4gICAgICAgIGFzc2V0OiBhc3NldFxuICAgICAgfSlcblxuICAgICAgc3JjLnB1c2goYF8keyBrZXkgfVsnJHsgYXNzZXQuaWQgfSddID0gcmVxdWlyZSgnJHtyZXF1aXJlUGF0aH0nKTtgKVxuICAgIH0pXG4gIH0pXG5cbiAgbGV0IHdyaXRlID0gcmVxdWlyZSgnZnMnKS53cml0ZUZpbGVTeW5jXG4gIHZhciBjb250ZW50ID0gc3JjLmpvaW4oXCJcXG5cIilcblxuICB3cml0ZShwcm9qZWN0LnBhdGgoJ2J1aWxkJywnYnVuZGxlJywnaW5kZXguanMnKSwgY29udGVudCwgJ3V0ZjgnKVxuXG4gIHJldHVybiBjb250ZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJCdW5kbGVcbiJdfQ==