'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BrowserBundle = BrowserBundle;
exports.AssetExporter = AssetExporter;
exports.ProjectExporter = ProjectExporter;
function BrowserBundle() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var project = options.project = this;

  if (options.asset && options.collection) {
    return AssetExporter.apply(project, arguments);
  }

  if (options.project) {
    return ProjectExporter.apply(project, arguments);
  }
}

function AssetExporter() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var callback = arguments[1];

  var fs = require('fs');
  var exists = fs.existsSync;
  var project = this;
  var asset = options.asset;

  if (!asset.raw) {
    asset.runImporter('disk', { sync: true });
  }

  var requirePath = asset.fingerprint ? asset.paths.project.replace(/\.\w+$/, '-' + asset.fingerprint + '.js') : asset.paths.project.replace(/\.\w+$/, '.js');
  var outPath = project.path('build', 'bundle', requirePath);

  var write = fs.writeFileSync;
  var mkdir = require('mkdirp').sync;
  var dirname = require('path').dirname;

  var output = {
    id: asset.id,
    paths: asset.paths,
    assetGroup: asset.assetGroup,
    fingerprint: asset.fingerprint
  };

  if (asset.assetGroup === 'data_sources') {
    output = Object.assign(output, {
      data: asset.data
    });
  }

  if (asset.assetGroup === 'documents') {
    output = Object.assign(output, {
      markdown: asset.raw,
      ast: asset.indexed,
      indexes: asset.indexes,
      html: asset.html.content
    });
  }

  mkdir(dirname(outPath));
  write(outPath, 'var data = module.exports = ' + JSON.stringify(output) + ';');

  return {
    requirePath: requirePath
  };
}

function ProjectExporter() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var callback = arguments[1];

  var project = options.project;

  var mkdir = require('mkdirp').sync;

  var keys = Object.keys(project.content);

  var src = ['exports = module.exports = require(\'./__project.js\');', 'exports.entities = require(\'./__entities.js\');', 'exports.assets = require(\'./__assets.js\');', 'exports.content = {}'];

  keys.forEach(function (key) {
    var collection = project.content[key];

    src.push('var _' + key + ' = exports.content.' + key + ' = {};');

    collection.forEach(function (asset) {
      var _AssetExporter$call = AssetExporter.call(project, { asset: asset, options: options, key: key });

      var requirePath = _AssetExporter$call.requirePath;

      src.push('_' + key + '[\'' + asset.id + '\'] = require(\'./' + requirePath + '\');');
    });
  });

  var write = require('fs').writeFileSync;
  var content = src.join("\n");

  write(project.path('build', 'bundle', 'index.js'), content, 'utf8');

  return content;
}

exports.default = BrowserBundle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBvcnRlcnMvYnVuZGxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O1FBQWdCLGFBQWEsR0FBYixhQUFhO1FBWWIsYUFBYSxHQUFiLGFBQWE7UUErQ2IsZUFBZSxHQUFmLGVBQWU7QUEzRHhCLFNBQVMsYUFBYSxHQUFnQjtNQUFkLE9BQU8seURBQUcsRUFBRTs7QUFDekMsTUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7O0FBRXBDLE1BQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO0FBQ3ZDLFdBQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7R0FDL0M7O0FBRUQsTUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO0FBQ25CLFdBQU8sZUFBZSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7R0FDakQ7Q0FDRjs7QUFFTSxTQUFTLGFBQWEsR0FBMEI7TUFBeEIsT0FBTyx5REFBRyxFQUFFO01BQUUsUUFBUTs7QUFDbkQsTUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3RCLE1BQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUE7QUFDMUIsTUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFBO01BQ1osS0FBSyxHQUFLLE9BQU8sQ0FBakIsS0FBSzs7QUFFWCxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtBQUNkLFNBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUE7R0FDeEM7O0FBRUQsTUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxRQUFNLEtBQUssQ0FBQyxXQUFXLFNBQU8sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3RKLE1BQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQTs7QUFFekQsTUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQTtBQUM1QixNQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ2xDLE1BQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUE7O0FBRXJDLE1BQUksTUFBTSxHQUFHO0FBQ1gsTUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQ1osU0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO0FBQ2xCLGNBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtBQUM1QixlQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7R0FDL0IsQ0FBQTs7QUFFRCxNQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssY0FBYyxFQUFFO0FBQ3ZDLFVBQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUM3QixVQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7S0FDakIsQ0FBQyxDQUFBO0dBQ0g7O0FBRUQsTUFBSSxLQUFLLENBQUMsVUFBVSxLQUFLLFdBQVcsRUFBRTtBQUNwQyxVQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDN0IsY0FBUSxFQUFFLEtBQUssQ0FBQyxHQUFHO0FBQ25CLFNBQUcsRUFBRSxLQUFLLENBQUMsT0FBTztBQUNsQixhQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87QUFDdEIsVUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTztLQUN6QixDQUFDLENBQUE7R0FDSDs7QUFFRCxPQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFDdkIsT0FBSyxDQUFDLE9BQU8sbUNBQWtDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQUssQ0FBQTs7QUFFMUUsU0FBTztBQUNMLGVBQVcsRUFBWCxXQUFXO0dBQ1osQ0FBQTtDQUNGOztBQUVNLFNBQVMsZUFBZSxHQUEwQjtNQUF4QixPQUFPLHlEQUFHLEVBQUU7TUFBRSxRQUFROztBQUNyRCxNQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFBOztBQUU3QixNQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFBOztBQUVsQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTs7QUFFekMsTUFBSSxHQUFHLEdBQUcsdUxBS1QsQ0FBQTs7QUFFRCxNQUFJLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRyxFQUFJO0FBQ2xCLFFBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7O0FBRXJDLE9BQUcsQ0FBQyxJQUFJLFdBQVUsR0FBRywyQkFBd0IsR0FBRyxZQUFVLENBQUE7O0FBRTFELGNBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLLEVBQUk7Z0NBQ0osYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUwsS0FBSyxFQUFFLE9BQU8sRUFBUCxPQUFPLEVBQUUsR0FBRyxFQUFILEdBQUcsRUFBRSxDQUFDOztVQUFwRSxXQUFXLHVCQUFYLFdBQVc7O0FBQ2pCLFNBQUcsQ0FBQyxJQUFJLE9BQU0sR0FBRyxXQUFPLEtBQUssQ0FBQyxFQUFFLDBCQUFvQixXQUFXLFVBQU0sQ0FBQTtLQUN0RSxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsTUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQTtBQUN2QyxNQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBOztBQUU1QixPQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsUUFBUSxFQUFDLFVBQVUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTs7QUFFakUsU0FBTyxPQUFPLENBQUE7Q0FDZjs7a0JBRWMsYUFBYSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gQnJvd3NlckJ1bmRsZSAob3B0aW9ucyA9IHt9KSB7XG4gIGxldCBwcm9qZWN0ID0gb3B0aW9ucy5wcm9qZWN0ID0gdGhpc1xuXG4gIGlmIChvcHRpb25zLmFzc2V0ICYmIG9wdGlvbnMuY29sbGVjdGlvbikge1xuICAgIHJldHVybiBBc3NldEV4cG9ydGVyLmFwcGx5KHByb2plY3QsIGFyZ3VtZW50cylcbiAgfVxuXG4gIGlmIChvcHRpb25zLnByb2plY3QpIHtcbiAgICByZXR1cm4gUHJvamVjdEV4cG9ydGVyLmFwcGx5KHByb2plY3QsIGFyZ3VtZW50cylcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQXNzZXRFeHBvcnRlciAob3B0aW9ucyA9IHt9LCBjYWxsYmFjaykge1xuICBsZXQgZnMgPSByZXF1aXJlKCdmcycpXG4gIGxldCBleGlzdHMgPSBmcy5leGlzdHNTeW5jXG4gIGxldCBwcm9qZWN0ID0gdGhpc1xuICBsZXQgeyBhc3NldCB9ID0gb3B0aW9uc1xuXG4gIGlmICghYXNzZXQucmF3KSB7XG4gICAgYXNzZXQucnVuSW1wb3J0ZXIoJ2Rpc2snLCB7c3luYzogdHJ1ZX0pXG4gIH1cblxuICBsZXQgcmVxdWlyZVBhdGggPSBhc3NldC5maW5nZXJwcmludCA/IGFzc2V0LnBhdGhzLnByb2plY3QucmVwbGFjZSgvXFwuXFx3KyQvLGAtJHsgYXNzZXQuZmluZ2VycHJpbnQgfS5qc2ApIDogYXNzZXQucGF0aHMucHJvamVjdC5yZXBsYWNlKC9cXC5cXHcrJC8sJy5qcycpXG4gIGxldCBvdXRQYXRoID0gcHJvamVjdC5wYXRoKCdidWlsZCcsJ2J1bmRsZScsIHJlcXVpcmVQYXRoKVxuXG4gIGxldCB3cml0ZSA9IGZzLndyaXRlRmlsZVN5bmNcbiAgbGV0IG1rZGlyID0gcmVxdWlyZSgnbWtkaXJwJykuc3luY1xuICBsZXQgZGlybmFtZSA9IHJlcXVpcmUoJ3BhdGgnKS5kaXJuYW1lXG5cbiAgbGV0IG91dHB1dCA9IHtcbiAgICBpZDogYXNzZXQuaWQsXG4gICAgcGF0aHM6IGFzc2V0LnBhdGhzLFxuICAgIGFzc2V0R3JvdXA6IGFzc2V0LmFzc2V0R3JvdXAsXG4gICAgZmluZ2VycHJpbnQ6IGFzc2V0LmZpbmdlcnByaW50XG4gIH1cblxuICBpZiAoYXNzZXQuYXNzZXRHcm91cCA9PT0gJ2RhdGFfc291cmNlcycpIHtcbiAgICBvdXRwdXQgPSBPYmplY3QuYXNzaWduKG91dHB1dCwge1xuICAgICAgZGF0YTogYXNzZXQuZGF0YVxuICAgIH0pXG4gIH1cblxuICBpZiAoYXNzZXQuYXNzZXRHcm91cCA9PT0gJ2RvY3VtZW50cycpIHtcbiAgICBvdXRwdXQgPSBPYmplY3QuYXNzaWduKG91dHB1dCwge1xuICAgICAgbWFya2Rvd246IGFzc2V0LnJhdyxcbiAgICAgIGFzdDogYXNzZXQuaW5kZXhlZCxcbiAgICAgIGluZGV4ZXM6IGFzc2V0LmluZGV4ZXMsXG4gICAgICBodG1sOiBhc3NldC5odG1sLmNvbnRlbnRcbiAgICB9KVxuICB9XG5cbiAgbWtkaXIoZGlybmFtZShvdXRQYXRoKSlcbiAgd3JpdGUob3V0UGF0aCwgYHZhciBkYXRhID0gbW9kdWxlLmV4cG9ydHMgPSAkeyBKU09OLnN0cmluZ2lmeShvdXRwdXQpIH07YClcblxuICByZXR1cm4ge1xuICAgIHJlcXVpcmVQYXRoXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFByb2plY3RFeHBvcnRlciAob3B0aW9ucyA9IHt9LCBjYWxsYmFjaykge1xuICBsZXQgcHJvamVjdCA9IG9wdGlvbnMucHJvamVjdFxuXG4gIGxldCBta2RpciA9IHJlcXVpcmUoJ21rZGlycCcpLnN5bmNcblxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvamVjdC5jb250ZW50KVxuXG4gIGxldCBzcmMgPSBbXG4gICAgYGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX19wcm9qZWN0LmpzJyk7YCxcbiAgICBgZXhwb3J0cy5lbnRpdGllcyA9IHJlcXVpcmUoJy4vX19lbnRpdGllcy5qcycpO2AsXG4gICAgYGV4cG9ydHMuYXNzZXRzID0gcmVxdWlyZSgnLi9fX2Fzc2V0cy5qcycpO2AsXG4gICAgYGV4cG9ydHMuY29udGVudCA9IHt9YFxuICBdXG5cbiAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgbGV0IGNvbGxlY3Rpb24gPSBwcm9qZWN0LmNvbnRlbnRba2V5XVxuXG4gICAgc3JjLnB1c2goYHZhciBfJHsga2V5IH0gPSBleHBvcnRzLmNvbnRlbnQuJHsga2V5IH0gPSB7fTtgKVxuXG4gICAgY29sbGVjdGlvbi5mb3JFYWNoKGFzc2V0ID0+IHtcbiAgICAgIGxldCB7IHJlcXVpcmVQYXRoIH0gPSBBc3NldEV4cG9ydGVyLmNhbGwocHJvamVjdCwgeyBhc3NldCwgb3B0aW9ucywga2V5IH0pXG4gICAgICBzcmMucHVzaChgXyR7IGtleSB9WyckeyBhc3NldC5pZCB9J10gPSByZXF1aXJlKCcuLyR7cmVxdWlyZVBhdGh9Jyk7YClcbiAgICB9KVxuICB9KVxuXG4gIGxldCB3cml0ZSA9IHJlcXVpcmUoJ2ZzJykud3JpdGVGaWxlU3luY1xuICB2YXIgY29udGVudCA9IHNyYy5qb2luKFwiXFxuXCIpXG5cbiAgd3JpdGUocHJvamVjdC5wYXRoKCdidWlsZCcsJ2J1bmRsZScsJ2luZGV4LmpzJyksIGNvbnRlbnQsICd1dGY4JylcblxuICByZXR1cm4gY29udGVudFxufVxuXG5leHBvcnQgZGVmYXVsdCBCcm93c2VyQnVuZGxlXG4iXX0=