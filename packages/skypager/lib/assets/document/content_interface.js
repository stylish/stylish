'use strict';

var _util = require('../../util');

module.exports = function (document) {
	var Interface = {};
	var definition = document.modelClass && document.modelClass.definition;

	var ast = document.indexed;

	Object.keys(definition.sectionsConfig).forEach(function (sectionId) {
		var sectionConfig = definition.sectionsConfig[sectionId];

		if (sectionConfig.builder && sectionConfig.builderType === 'builder') {
			(0, _util.lazy)(Interface, sectionId, function () {
				var section = document.nodes.at.id(sectionConfig.slug);
				var built = sectionConfig.builder(section) || {};

				if (!isEmpty(sectionConfig.config.articles)) {
					Object.keys(sectionConfig.config.articles).forEach(function (articleId) {
						var articleConfig = sectionConfig.config.articles[articleId];

						if (articleConfig.builder && articleConfig.builderType === 'map') {
							(0, _util.lazy)(built, articleId, function () {
								return section && section.childHeadings.map(articleConfig.builder);
							}, false);
						}
					});
				}

				return built;
			}, false);
		}
	});

	Interface.toJSON = function () {
		var obj = {};

		Object.keys(definition.sectionsConfig).forEach(function (sectionId) {
			obj[sectionId] = {};

			var sectionConfig = definition.sectionsConfig[sectionId];
			var section = document.nodes.at.id(sectionConfig.slug);

			if (sectionConfig.builder && sectionConfig.builderType === 'builder') {
				if (!isEmpty(sectionConfig.config.articles)) {
					Object.keys(sectionConfig.config.articles).forEach(function (articleId) {
						var articleConfig = sectionConfig.config.articles[articleId];
						if (articleConfig.builder && articleConfig.builderType === 'map') {
							obj[sectionId][articleId] = obj[sectionId][articleId] || section && section.childHeadings.map(articleConfig.builder);
						}
					});
				}
			}
		});

		return obj;
	};

	return Interface;
};

function isEmpty(obj) {
	return !obj || Object.keys(obj).length === 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hc3NldHMvZG9jdW1lbnQvY29udGVudF9pbnRlcmZhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxRQUFRLEVBQUU7QUFDbEMsS0FBSSxTQUFTLEdBQUcsRUFBRyxDQUFBO0FBQ25CLEtBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUE7O0FBRXJFLEtBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUE7O0FBRTNCLE9BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVMsRUFBSTtBQUMzRCxNQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFBOztBQUV4RCxNQUFJLGFBQWEsQ0FBQyxPQUFPLElBQUksYUFBYSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7QUFDckUsYUFaWSxJQUFJLEVBWVgsU0FBUyxFQUFFLFNBQVMsRUFBRyxZQUFNO0FBQ2pDLFFBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDdEQsUUFBSSxLQUFLLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUE7O0FBRWhELFFBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUM1QyxXQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUyxFQUFJO0FBQy9ELFVBQUksYUFBYSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBOztBQUU1RCxVQUFJLGFBQWEsQ0FBQyxPQUFPLElBQUksYUFBYSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7QUFDakUsaUJBckJRLElBQUksRUFxQlAsS0FBSyxFQUFFLFNBQVMsRUFBRyxZQUFNO0FBQzdCLGVBQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNsRSxFQUFHLEtBQUssQ0FBQyxDQUFBO09BQ1o7TUFDRCxDQUFDLENBQUE7S0FDRjs7QUFFQyxXQUFPLEtBQUssQ0FBQTtJQUNkLEVBQUcsS0FBSyxDQUFDLENBQUE7R0FDVjtFQUNELENBQUMsQ0FBQTs7QUFFRCxVQUFTLENBQUMsTUFBTSxHQUFHLFlBQU07QUFDdkIsTUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFBOztBQUViLFFBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVMsRUFBSTtBQUN6RCxNQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFBOztBQUVyQixPQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3ZELE9BQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUE7O0FBRXZELE9BQUksYUFBYSxDQUFDLE9BQU8sSUFBSSxhQUFhLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtBQUNsRSxRQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDM0MsV0FBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVMsRUFBSTtBQUM5RCxVQUFJLGFBQWEsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM1RCxVQUFJLGFBQWEsQ0FBQyxPQUFPLElBQUksYUFBYSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7QUFDaEUsVUFBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO09BQ3JIO01BQ0YsQ0FBQyxDQUFBO0tBQ0g7SUFDRjtHQUNGLENBQUMsQ0FBQTs7QUFFRixTQUFPLEdBQUcsQ0FBQTtFQUNYLENBQUE7O0FBRUQsUUFBTyxTQUFTLENBQUE7Q0FDakIsQ0FBQTs7QUFFRCxTQUFTLE9BQU8sQ0FBRSxHQUFHLEVBQUU7QUFDcEIsUUFBTyxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUE7Q0FDOUMiLCJmaWxlIjoiY29udGVudF9pbnRlcmZhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NpZ24sIGxhenksIGhpZGUsIHVuZGVyc2NvcmUgfSBmcm9tICcuLi8uLi91dGlsJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb2N1bWVudCkge1xuXHQgIGxldCBJbnRlcmZhY2UgPSB7IH1cblx0ICBsZXQgZGVmaW5pdGlvbiA9IGRvY3VtZW50Lm1vZGVsQ2xhc3MgJiYgZG9jdW1lbnQubW9kZWxDbGFzcy5kZWZpbml0aW9uXG5cbiAgICBsZXQgYXN0ID0gZG9jdW1lbnQuaW5kZXhlZFxuXG5cdCAgT2JqZWN0LmtleXMoZGVmaW5pdGlvbi5zZWN0aW9uc0NvbmZpZykuZm9yRWFjaChzZWN0aW9uSWQgPT4ge1xuXHRcdCAgbGV0IHNlY3Rpb25Db25maWcgPSBkZWZpbml0aW9uLnNlY3Rpb25zQ29uZmlnW3NlY3Rpb25JZF1cblxuXHRcdCAgaWYgKHNlY3Rpb25Db25maWcuYnVpbGRlciAmJiBzZWN0aW9uQ29uZmlnLmJ1aWxkZXJUeXBlID09PSAnYnVpbGRlcicpIHtcblx0XHRcdCAgbGF6eShJbnRlcmZhY2UsIHNlY3Rpb25JZCwgKCgpID0+IHtcblx0XHRcdFx0ICBsZXQgc2VjdGlvbiA9IGRvY3VtZW50Lm5vZGVzLmF0LmlkKHNlY3Rpb25Db25maWcuc2x1Zylcblx0XHRcdFx0ICBsZXQgYnVpbHQgPSBzZWN0aW9uQ29uZmlnLmJ1aWxkZXIoc2VjdGlvbikgfHwge31cblxuXHRcdFx0XHQgIGlmICghaXNFbXB0eShzZWN0aW9uQ29uZmlnLmNvbmZpZy5hcnRpY2xlcykpIHtcblx0XHRcdFx0XHQgIE9iamVjdC5rZXlzKHNlY3Rpb25Db25maWcuY29uZmlnLmFydGljbGVzKS5mb3JFYWNoKGFydGljbGVJZCA9PiB7XG5cdFx0XHRcdFx0XHQgIGxldCBhcnRpY2xlQ29uZmlnID0gc2VjdGlvbkNvbmZpZy5jb25maWcuYXJ0aWNsZXNbYXJ0aWNsZUlkXVxuXG5cdFx0XHRcdFx0XHQgIGlmIChhcnRpY2xlQ29uZmlnLmJ1aWxkZXIgJiYgYXJ0aWNsZUNvbmZpZy5idWlsZGVyVHlwZSA9PT0gJ21hcCcpIHtcblx0XHRcdFx0XHRcdFx0ICBsYXp5KGJ1aWx0LCBhcnRpY2xlSWQsICgoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0ICByZXR1cm4gc2VjdGlvbiAmJiBzZWN0aW9uLmNoaWxkSGVhZGluZ3MubWFwKGFydGljbGVDb25maWcuYnVpbGRlcilcblx0XHRcdFx0XHRcdFx0ICB9KSwgZmFsc2UpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXG5cdFx0XHRcdCAgcmV0dXJuIGJ1aWx0XG5cdFx0XHR9KSwgZmFsc2UpXG5cdFx0fVxuXHR9KVxuXG4gIEludGVyZmFjZS50b0pTT04gPSAoKSA9PiB7XG4gICAgbGV0IG9iaiA9IHt9XG5cblx0ICBPYmplY3Qua2V5cyhkZWZpbml0aW9uLnNlY3Rpb25zQ29uZmlnKS5mb3JFYWNoKHNlY3Rpb25JZCA9PiB7XG4gICAgICBvYmpbc2VjdGlvbklkXSA9IHt9XG5cblx0XHQgIGxldCBzZWN0aW9uQ29uZmlnID0gZGVmaW5pdGlvbi5zZWN0aW9uc0NvbmZpZ1tzZWN0aW9uSWRdXG5cdCAgICBsZXQgc2VjdGlvbiA9IGRvY3VtZW50Lm5vZGVzLmF0LmlkKHNlY3Rpb25Db25maWcuc2x1ZylcblxuXHRcdCAgaWYgKHNlY3Rpb25Db25maWcuYnVpbGRlciAmJiBzZWN0aW9uQ29uZmlnLmJ1aWxkZXJUeXBlID09PSAnYnVpbGRlcicpIHtcbiAgICAgICAgaWYgKCFpc0VtcHR5KHNlY3Rpb25Db25maWcuY29uZmlnLmFydGljbGVzKSkge1xuICAgICAgICAgIE9iamVjdC5rZXlzKHNlY3Rpb25Db25maWcuY29uZmlnLmFydGljbGVzKS5mb3JFYWNoKGFydGljbGVJZCA9PiB7XG4gICAgICAgICAgICBsZXQgYXJ0aWNsZUNvbmZpZyA9IHNlY3Rpb25Db25maWcuY29uZmlnLmFydGljbGVzW2FydGljbGVJZF1cbiAgICAgICAgICAgIGlmIChhcnRpY2xlQ29uZmlnLmJ1aWxkZXIgJiYgYXJ0aWNsZUNvbmZpZy5idWlsZGVyVHlwZSA9PT0gJ21hcCcpIHtcbiAgICAgICAgICAgICAgb2JqW3NlY3Rpb25JZF1bYXJ0aWNsZUlkXSA9IG9ialtzZWN0aW9uSWRdW2FydGljbGVJZF0gfHwgc2VjdGlvbiAmJiBzZWN0aW9uLmNoaWxkSGVhZGluZ3MubWFwKGFydGljbGVDb25maWcuYnVpbGRlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiBvYmpcbiAgfVxuXG4gIHJldHVybiBJbnRlcmZhY2Vcbn1cblxuZnVuY3Rpb24gaXNFbXB0eSAob2JqKSB7XG5cdCAgcmV0dXJuICFvYmogfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDBcbn1cbiJdfQ==