'use strict';

var _util = require('../../util');

/**
 * In the Model Definition DSL it is possible to define the structure
 * of the document and supply functions which can be used to shape
 * the document into a JSON object.
 *
 */
module.exports = function (document) {
  var Interface = {};
  var definition = document.modelClass && document.modelClass.definition;

  var ast = document.indexed;

  ast.children.forEach(function (node) {
    if (node.type === 'heading') {
      (0, _util.assign)(node, {
        extract: function extract() {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return extractContent.apply(undefined, [node].concat(args));
        }
      });
    }
  });

  Object.keys(definition.sectionsConfig).forEach(function (sectionId) {
    var sectionConfig = definition.sectionsConfig[sectionId];

    if (sectionConfig.builder && sectionConfig.builderType === 'builder') {
      (0, _util.lazy)(Interface, sectionId, function () {
        var section = document.nodes.at.id(sectionConfig.slug);
        var built = sectionConfig.builder(section) || {};

        if (!isEmpty(sectionConfig.config.articles)) {
          Object.keys(sectionConfig.config.articles).forEach(function (articleId) {
            var articleConfig = sectionConfig.config.articles[articleId];

            if (articleConfig.builder && articleConfig.builderType === 'map') {
              (0, _util.lazy)(built, articleId, function () {
                return section && section.childHeadings.map(articleConfig.builder);
              }, false);
            }
          });
        }

        return built;
      }, false);
    }
  });

  Interface.toJSON = function () {
    var obj = {};

    Object.keys(definition.sectionsConfig).forEach(function (sectionId) {
      obj[sectionId] = {};

      var sectionConfig = definition.sectionsConfig[sectionId];
      var section = document.nodes.at.id(sectionConfig.slug);

      if (sectionConfig.builder && sectionConfig.builderType === 'builder') {
        if (!isEmpty(sectionConfig.config.articles)) {
          Object.keys(sectionConfig.config.articles).forEach(function (articleId) {
            var articleConfig = sectionConfig.config.articles[articleId];
            if (articleConfig.builder && articleConfig.builderType === 'map') {
              obj[sectionId][articleId] = obj[sectionId][articleId] || section && section.childHeadings.map(articleConfig.builder);
            }
          });
        }
      }
    });

    return obj;
  };

  return Interface;
};

function extractContent(node, extractionType) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  if (extractionType === 'paragraphs') {
    return 'TODO!';
  }
}

function isEmpty(obj) {
  return !obj || Object.keys(obj).length === 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hc3NldHMvZG9jdW1lbnQvY29udGVudF9pbnRlcmZhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVFBLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxRQUFRLEVBQUU7QUFDbEMsTUFBSSxTQUFTLEdBQUcsRUFBRyxDQUFBO0FBQ25CLE1BQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUE7O0FBRXJFLE1BQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUE7O0FBRTFCLEtBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQzNCLFFBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7QUFDM0IsZ0JBaEJDLE1BQU0sRUFnQkEsSUFBSSxFQUFFO0FBQ1gsZUFBTyxFQUFHOzRDQUFJLElBQUk7QUFBSixnQkFBSTs7O2lCQUFLLGNBQWMsbUJBQUMsSUFBSSxTQUFLLElBQUksRUFBQztTQUFBLEFBQUM7T0FDdEQsQ0FBQyxDQUFBO0tBQ0g7R0FDRixDQUFDLENBQUE7O0FBRUgsUUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUyxFQUFJO0FBQzNELFFBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUE7O0FBRXhELFFBQUksYUFBYSxDQUFDLE9BQU8sSUFBSSxhQUFhLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtBQUNyRSxnQkExQlksSUFBSSxFQTBCWCxTQUFTLEVBQUUsU0FBUyxFQUFHLFlBQU07QUFDakMsWUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUN0RCxZQUFJLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTs7QUFFaEQsWUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQzVDLGdCQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUyxFQUFJO0FBQy9ELGdCQUFJLGFBQWEsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTs7QUFFNUQsZ0JBQUksYUFBYSxDQUFDLE9BQU8sSUFBSSxhQUFhLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtBQUNqRSx3QkFuQ1EsSUFBSSxFQW1DUCxLQUFLLEVBQUUsU0FBUyxFQUFHLFlBQU07QUFDN0IsdUJBQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtlQUNsRSxFQUFHLEtBQUssQ0FBQyxDQUFBO2FBQ1o7V0FDRCxDQUFDLENBQUE7U0FDRjs7QUFFQyxlQUFPLEtBQUssQ0FBQTtPQUNkLEVBQUcsS0FBSyxDQUFDLENBQUE7S0FDVjtHQUNELENBQUMsQ0FBQTs7QUFFRCxXQUFTLENBQUMsTUFBTSxHQUFHLFlBQU07QUFDdkIsUUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFBOztBQUViLFVBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVMsRUFBSTtBQUN6RCxTQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFBOztBQUVyQixVQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3ZELFVBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUE7O0FBRXZELFVBQUksYUFBYSxDQUFDLE9BQU8sSUFBSSxhQUFhLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtBQUNsRSxZQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDM0MsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTLEVBQUk7QUFDOUQsZ0JBQUksYUFBYSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQzVELGdCQUFJLGFBQWEsQ0FBQyxPQUFPLElBQUksYUFBYSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7QUFDaEUsaUJBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTthQUNySDtXQUNGLENBQUMsQ0FBQTtTQUNIO09BQ0Y7S0FDRixDQUFDLENBQUE7O0FBRUYsV0FBTyxHQUFHLENBQUE7R0FDWCxDQUFBOztBQUVELFNBQU8sU0FBUyxDQUFBO0NBQ2pCLENBQUE7O0FBRUQsU0FBUyxjQUFjLENBQUUsSUFBSSxFQUFFLGNBQWMsRUFBZTtNQUFiLE9BQU8seURBQUUsRUFBRTs7QUFDeEQsTUFBSSxjQUFjLEtBQUssWUFBWSxFQUFFO0FBQ25DLFdBQU8sT0FBTyxDQUFBO0dBQ2Y7Q0FDRjs7QUFFRCxTQUFTLE9BQU8sQ0FBRSxHQUFHLEVBQUU7QUFDcEIsU0FBTyxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUE7Q0FDOUMiLCJmaWxlIjoiY29udGVudF9pbnRlcmZhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NpZ24sIGxhenksIGhpZGUsIHVuZGVyc2NvcmUgfSBmcm9tICcuLi8uLi91dGlsJ1xuXG4vKipcbiAqIEluIHRoZSBNb2RlbCBEZWZpbml0aW9uIERTTCBpdCBpcyBwb3NzaWJsZSB0byBkZWZpbmUgdGhlIHN0cnVjdHVyZVxuICogb2YgdGhlIGRvY3VtZW50IGFuZCBzdXBwbHkgZnVuY3Rpb25zIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHNoYXBlXG4gKiB0aGUgZG9jdW1lbnQgaW50byBhIEpTT04gb2JqZWN0LlxuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9jdW1lbnQpIHtcblx0ICBsZXQgSW50ZXJmYWNlID0geyB9XG5cdCAgbGV0IGRlZmluaXRpb24gPSBkb2N1bWVudC5tb2RlbENsYXNzICYmIGRvY3VtZW50Lm1vZGVsQ2xhc3MuZGVmaW5pdGlvblxuXG4gICAgbGV0IGFzdCA9IGRvY3VtZW50LmluZGV4ZWRcblxuICAgIGFzdC5jaGlsZHJlbi5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ2hlYWRpbmcnKSB7XG4gICAgICAgIGFzc2lnbihub2RlLCB7XG4gICAgICAgICAgZXh0cmFjdDogKCguLi5hcmdzKSA9PiBleHRyYWN0Q29udGVudChub2RlLCAuLi5hcmdzKSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG5cdCAgT2JqZWN0LmtleXMoZGVmaW5pdGlvbi5zZWN0aW9uc0NvbmZpZykuZm9yRWFjaChzZWN0aW9uSWQgPT4ge1xuXHRcdCAgbGV0IHNlY3Rpb25Db25maWcgPSBkZWZpbml0aW9uLnNlY3Rpb25zQ29uZmlnW3NlY3Rpb25JZF1cblxuXHRcdCAgaWYgKHNlY3Rpb25Db25maWcuYnVpbGRlciAmJiBzZWN0aW9uQ29uZmlnLmJ1aWxkZXJUeXBlID09PSAnYnVpbGRlcicpIHtcblx0XHRcdCAgbGF6eShJbnRlcmZhY2UsIHNlY3Rpb25JZCwgKCgpID0+IHtcblx0XHRcdFx0ICBsZXQgc2VjdGlvbiA9IGRvY3VtZW50Lm5vZGVzLmF0LmlkKHNlY3Rpb25Db25maWcuc2x1Zylcblx0XHRcdFx0ICBsZXQgYnVpbHQgPSBzZWN0aW9uQ29uZmlnLmJ1aWxkZXIoc2VjdGlvbikgfHwge31cblxuXHRcdFx0XHQgIGlmICghaXNFbXB0eShzZWN0aW9uQ29uZmlnLmNvbmZpZy5hcnRpY2xlcykpIHtcblx0XHRcdFx0XHQgIE9iamVjdC5rZXlzKHNlY3Rpb25Db25maWcuY29uZmlnLmFydGljbGVzKS5mb3JFYWNoKGFydGljbGVJZCA9PiB7XG5cdFx0XHRcdFx0XHQgIGxldCBhcnRpY2xlQ29uZmlnID0gc2VjdGlvbkNvbmZpZy5jb25maWcuYXJ0aWNsZXNbYXJ0aWNsZUlkXVxuXG5cdFx0XHRcdFx0XHQgIGlmIChhcnRpY2xlQ29uZmlnLmJ1aWxkZXIgJiYgYXJ0aWNsZUNvbmZpZy5idWlsZGVyVHlwZSA9PT0gJ21hcCcpIHtcblx0XHRcdFx0XHRcdFx0ICBsYXp5KGJ1aWx0LCBhcnRpY2xlSWQsICgoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0ICByZXR1cm4gc2VjdGlvbiAmJiBzZWN0aW9uLmNoaWxkSGVhZGluZ3MubWFwKGFydGljbGVDb25maWcuYnVpbGRlcilcblx0XHRcdFx0XHRcdFx0ICB9KSwgZmFsc2UpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXG5cdFx0XHRcdCAgcmV0dXJuIGJ1aWx0XG5cdFx0XHR9KSwgZmFsc2UpXG5cdFx0fVxuXHR9KVxuXG4gIEludGVyZmFjZS50b0pTT04gPSAoKSA9PiB7XG4gICAgbGV0IG9iaiA9IHt9XG5cblx0ICBPYmplY3Qua2V5cyhkZWZpbml0aW9uLnNlY3Rpb25zQ29uZmlnKS5mb3JFYWNoKHNlY3Rpb25JZCA9PiB7XG4gICAgICBvYmpbc2VjdGlvbklkXSA9IHt9XG5cblx0XHQgIGxldCBzZWN0aW9uQ29uZmlnID0gZGVmaW5pdGlvbi5zZWN0aW9uc0NvbmZpZ1tzZWN0aW9uSWRdXG5cdCAgICBsZXQgc2VjdGlvbiA9IGRvY3VtZW50Lm5vZGVzLmF0LmlkKHNlY3Rpb25Db25maWcuc2x1ZylcblxuXHRcdCAgaWYgKHNlY3Rpb25Db25maWcuYnVpbGRlciAmJiBzZWN0aW9uQ29uZmlnLmJ1aWxkZXJUeXBlID09PSAnYnVpbGRlcicpIHtcbiAgICAgICAgaWYgKCFpc0VtcHR5KHNlY3Rpb25Db25maWcuY29uZmlnLmFydGljbGVzKSkge1xuICAgICAgICAgIE9iamVjdC5rZXlzKHNlY3Rpb25Db25maWcuY29uZmlnLmFydGljbGVzKS5mb3JFYWNoKGFydGljbGVJZCA9PiB7XG4gICAgICAgICAgICBsZXQgYXJ0aWNsZUNvbmZpZyA9IHNlY3Rpb25Db25maWcuY29uZmlnLmFydGljbGVzW2FydGljbGVJZF1cbiAgICAgICAgICAgIGlmIChhcnRpY2xlQ29uZmlnLmJ1aWxkZXIgJiYgYXJ0aWNsZUNvbmZpZy5idWlsZGVyVHlwZSA9PT0gJ21hcCcpIHtcbiAgICAgICAgICAgICAgb2JqW3NlY3Rpb25JZF1bYXJ0aWNsZUlkXSA9IG9ialtzZWN0aW9uSWRdW2FydGljbGVJZF0gfHwgc2VjdGlvbiAmJiBzZWN0aW9uLmNoaWxkSGVhZGluZ3MubWFwKGFydGljbGVDb25maWcuYnVpbGRlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiBvYmpcbiAgfVxuXG4gIHJldHVybiBJbnRlcmZhY2Vcbn1cblxuZnVuY3Rpb24gZXh0cmFjdENvbnRlbnQgKG5vZGUsIGV4dHJhY3Rpb25UeXBlLCBvcHRpb25zID17fSkge1xuICBpZiAoZXh0cmFjdGlvblR5cGUgPT09ICdwYXJhZ3JhcGhzJykge1xuICAgIHJldHVybiAnVE9ETyEnXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFbXB0eSAob2JqKSB7XG5cdCAgcmV0dXJuICFvYmogfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDBcbn1cbiJdfQ==