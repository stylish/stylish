'use strict';

var _util = require('../../util');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function transformer(ast, doc) {
	var nodes = ast.children;

	var mainNode = {
		type: 'unknown',
		children: [],
		id: doc.slug,
		data: {
			htmlName: 'main',
			htmlAttributes: { id: doc.slug, 'class': 'skypager-document ' + (doc.groupName || '') }
		}
	};

	var depthIndexes = doc.indexes.depths;
	var present = Object.keys(depthIndexes).filter(function (d) {
		return d >= 2 && depthIndexes[d].length > 0;
	}).sort();

	var containers = _defineProperty({}, doc.slug, mainNode);

	present.forEach(function (level) {
		var headingIndexes = depthIndexes[level];

		headingIndexes.forEach(function (hIndex) {
			try {
				var heading = doc.nodes.at.index(hIndex);
				nodes[hIndex] = containers[heading.id] = makeContainerNode(heading);
			} catch (error) {
				console.log('error building container node', error.message, doc.paths.absolute);
			}
		});
	});

	nodes.forEach(function (node) {
		var parentContainer = containers[node.parentId] || mainNode;

		if (!node.data) {
			node.data = {};
		}
		if (!node.data.htmlAttributes) {
			node.data.htmlAttributes = {};
		}

		Object.assign(node.data.htmlAttributes, {
			'data-node-index': node.index
		});

		if (parentContainer) {
			parentContainer.children.push(node);
		} else {}
	});

	return {
		type: 'root',
		children: [mainNode]
	};
}

var CONTAINERS = {
	2: 'section',
	3: 'article',
	4: 'div',
	5: 'div',
	6: 'div'
};

function makeContainerNode(heading) {
	var htmlName = CONTAINERS[heading.depth];

	var htmlAttributes = {
		'class': ['depth-' + heading.depth],
		'id': heading.id
	};

	if (heading.depth === 2 || heading.depth === 3) {
		htmlAttributes.class.push(htmlName + 's');
	}

	htmlAttributes.class = htmlAttributes.class.join(' ');

	var rangeInfo = {};
	var descendants = heading.descendants || [];

	return Object.assign({}, heading, {
		children: [heading],
		data: {
			htmlName: htmlName,
			htmlAttributes: htmlAttributes
		},
		type: htmlName || 'unknown'
	});
}

module.exports = transformer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hc3NldHMvZG9jdW1lbnQvdHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsU0FBUyxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUM5QixLQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFBOztBQUV4QixLQUFJLFFBQVEsR0FBRztBQUNkLE1BQUksRUFBRSxTQUFTO0FBQ2YsVUFBUSxFQUFFLEVBQUc7QUFDYixJQUFFLEVBQUUsR0FBRyxDQUFDLElBQUk7QUFDWixNQUFJLEVBQUU7QUFDTCxXQUFRLEVBQUUsTUFBTTtBQUNoQixpQkFBYyxFQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixJQUFJLEdBQUcsQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFBLEFBQUMsRUFBRTtHQUN0RjtFQUNELENBQUE7O0FBRUQsS0FBSSxZQUFZLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUE7QUFDckMsS0FBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDO1NBQUksQ0FBQyxJQUFHLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7RUFBQSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7O0FBRS9GLEtBQUksVUFBVSx1QkFDWixHQUFHLENBQUMsSUFBSSxFQUFJLFFBQVEsQ0FDckIsQ0FBQTs7QUFFRCxRQUFPLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSyxFQUFJO0FBQ3hCLE1BQUksY0FBYyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQTs7QUFFeEMsZ0JBQWMsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDaEMsT0FBSTtBQUNILFFBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUN4QyxTQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNuRSxDQUFDLE9BQU8sS0FBSyxFQUFFO0FBQ2YsV0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDL0U7R0FDRCxDQUFDLENBQUE7RUFDRixDQUFDLENBQUE7O0FBRUYsTUFBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUksRUFBSTtBQUNyQixNQUFJLGVBQWUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQTs7QUFFM0QsTUFBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFBRSxPQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQTtHQUFFO0FBQ2pDLE1BQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtBQUFFLE9BQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQTtHQUFFOztBQUUvRCxRQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO0FBQ3ZDLG9CQUFpQixFQUFFLElBQUksQ0FBQyxLQUFLO0dBQzdCLENBQUMsQ0FBQTs7QUFFRixNQUFHLGVBQWUsRUFBQztBQUNsQixrQkFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7R0FDbkMsTUFBTSxFQUNOO0VBQ0QsQ0FBQyxDQUFBOztBQUVGLFFBQU87QUFDTixNQUFJLEVBQUUsTUFBTTtBQUNaLFVBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztFQUNwQixDQUFBO0NBQ0Q7O0FBRUQsSUFBTSxVQUFVLEdBQUc7QUFDZixFQUFDLEVBQUUsU0FBUztBQUNaLEVBQUMsRUFBRSxTQUFTO0FBQ1osRUFBQyxFQUFFLEtBQUs7QUFDUixFQUFDLEVBQUUsS0FBSztBQUNSLEVBQUMsRUFBRSxLQUFLO0NBQ1gsQ0FBQTs7QUFFRCxTQUFTLGlCQUFpQixDQUFFLE9BQU8sRUFBRTtBQUNqQyxLQUFJLFFBQVEsR0FBRyxVQUFVLENBQUUsT0FBTyxDQUFDLEtBQUssQ0FBRSxDQUFBOztBQUUxQyxLQUFJLGNBQWMsR0FBRztBQUNqQixTQUFPLEVBQUUsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNuQyxNQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUU7RUFDbkIsQ0FBQTs7QUFFSixLQUFHLE9BQU8sQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFDO0FBQzdDLGdCQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUE7RUFDekM7O0FBRUQsZUFBYyxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTs7QUFFckQsS0FBSSxTQUFTLEdBQUcsRUFBRSxDQUFBO0FBQ2xCLEtBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFBOztBQUV4QyxRQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRTtBQUM5QixVQUFRLEVBQUMsQ0FBRSxPQUFPLENBQUU7QUFDcEIsTUFBSSxFQUFFO0FBQ1YsV0FBUSxFQUFSLFFBQVE7QUFDUixpQkFBYyxFQUFkLGNBQWM7R0FDZjtBQUNLLE1BQUksRUFBRSxRQUFRLElBQUksU0FBUztFQUM5QixDQUFDLENBQUE7Q0FDTDs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQSIsImZpbGUiOiJ0cmFuc2Zvcm1lci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBsdXJhbGl6ZSwgc2luZ3VsYXJpemUsIGNsb25lIH0gZnJvbSAnLi4vLi4vdXRpbCdcblxuZnVuY3Rpb24gdHJhbnNmb3JtZXIoYXN0LCBkb2MpIHtcblx0bGV0IG5vZGVzID0gYXN0LmNoaWxkcmVuXG5cblx0bGV0IG1haW5Ob2RlID0ge1xuXHRcdHR5cGU6ICd1bmtub3duJyxcblx0XHRjaGlsZHJlbjogWyBdLFxuXHRcdGlkOiBkb2Muc2x1Zyxcblx0XHRkYXRhOiB7XG5cdFx0XHRodG1sTmFtZTogJ21haW4nLFxuXHRcdFx0aHRtbEF0dHJpYnV0ZXM6eyBpZDogZG9jLnNsdWcsICdjbGFzcyc6ICdza3lwYWdlci1kb2N1bWVudCAnICsgKGRvYy5ncm91cE5hbWUgfHwgJycpIH1cblx0XHR9XG5cdH1cblxuXHRsZXQgZGVwdGhJbmRleGVzID0gZG9jLmluZGV4ZXMuZGVwdGhzXG5cdGxldCBwcmVzZW50ID0gT2JqZWN0LmtleXMoZGVwdGhJbmRleGVzKS5maWx0ZXIoZCA9PiBkID49MiAmJiBkZXB0aEluZGV4ZXNbZF0ubGVuZ3RoID4gMCkuc29ydCgpXG5cblx0bGV0IGNvbnRhaW5lcnMgPSB7XG5cdFx0W2RvYy5zbHVnXSA6IG1haW5Ob2RlXG5cdH1cblxuXHRwcmVzZW50LmZvckVhY2gobGV2ZWwgPT4ge1xuXHRcdGxldCBoZWFkaW5nSW5kZXhlcyA9IGRlcHRoSW5kZXhlc1tsZXZlbF1cblxuXHRcdGhlYWRpbmdJbmRleGVzLmZvckVhY2goaEluZGV4ID0+IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhciBoZWFkaW5nID0gZG9jLm5vZGVzLmF0LmluZGV4KGhJbmRleClcblx0XHRcdFx0bm9kZXNbaEluZGV4XSA9IGNvbnRhaW5lcnNbaGVhZGluZy5pZF0gPSBtYWtlQ29udGFpbmVyTm9kZShoZWFkaW5nKVxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ2Vycm9yIGJ1aWxkaW5nIGNvbnRhaW5lciBub2RlJywgZXJyb3IubWVzc2FnZSwgZG9jLnBhdGhzLmFic29sdXRlKVxuXHRcdFx0fVxuXHRcdH0pXG5cdH0pXG5cblx0bm9kZXMuZm9yRWFjaChub2RlID0+IHtcblx0XHRsZXQgcGFyZW50Q29udGFpbmVyID0gY29udGFpbmVyc1tub2RlLnBhcmVudElkXSB8fCBtYWluTm9kZVxuXG5cdFx0aWYoIW5vZGUuZGF0YSkgeyBub2RlLmRhdGEgPSB7fSB9XG5cdFx0aWYoIW5vZGUuZGF0YS5odG1sQXR0cmlidXRlcykgeyBub2RlLmRhdGEuaHRtbEF0dHJpYnV0ZXMgPSB7fSB9XG5cblx0XHRPYmplY3QuYXNzaWduKG5vZGUuZGF0YS5odG1sQXR0cmlidXRlcywge1xuXHRcdFx0J2RhdGEtbm9kZS1pbmRleCc6IG5vZGUuaW5kZXhcblx0XHR9KVxuXG5cdFx0aWYocGFyZW50Q29udGFpbmVyKXtcblx0XHRcdHBhcmVudENvbnRhaW5lci5jaGlsZHJlbi5wdXNoKG5vZGUpXG5cdFx0fSBlbHNlIHtcblx0XHR9XG5cdH0pXG5cblx0cmV0dXJuIHtcblx0XHR0eXBlOiAncm9vdCcsXG5cdFx0Y2hpbGRyZW46IFttYWluTm9kZV1cblx0fVxufVxuXG5jb25zdCBDT05UQUlORVJTID0ge1xuICAgIDI6ICdzZWN0aW9uJyxcbiAgICAzOiAnYXJ0aWNsZScsXG4gICAgNDogJ2RpdicsXG4gICAgNTogJ2RpdicsXG4gICAgNjogJ2Rpdidcbn1cblxuZnVuY3Rpb24gbWFrZUNvbnRhaW5lck5vZGUgKGhlYWRpbmcpIHtcbiAgICBsZXQgaHRtbE5hbWUgPSBDT05UQUlORVJTWyBoZWFkaW5nLmRlcHRoIF1cblxuICAgIGxldCBodG1sQXR0cmlidXRlcyA9IHtcbiAgICAgICAgJ2NsYXNzJzogWydkZXB0aC0nICsgaGVhZGluZy5kZXB0aF0sXG4gICAgICAgICdpZCc6IGhlYWRpbmcuaWRcbiAgICB9XG5cblx0aWYoaGVhZGluZy5kZXB0aCA9PT0gMiB8fCBoZWFkaW5nLmRlcHRoID09PSAzKXtcblx0XHRodG1sQXR0cmlidXRlcy5jbGFzcy5wdXNoKGh0bWxOYW1lICsgJ3MnKVxuXHR9XG5cblx0aHRtbEF0dHJpYnV0ZXMuY2xhc3MgPSBodG1sQXR0cmlidXRlcy5jbGFzcy5qb2luKCcgJylcblxuXHRsZXQgcmFuZ2VJbmZvID0ge31cblx0bGV0IGRlc2NlbmRhbnRzID0gaGVhZGluZy5kZXNjZW5kYW50cyB8fCBbXVxuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGhlYWRpbmcsIHtcbiAgICAgICAgY2hpbGRyZW46WyBoZWFkaW5nIF0sXG4gICAgICAgIGRhdGE6IHtcblx0XHQgIGh0bWxOYW1lLFxuXHRcdCAgaHRtbEF0dHJpYnV0ZXNcblx0XHR9LFxuICAgICAgICB0eXBlOiBodG1sTmFtZSB8fCAndW5rbm93bidcbiAgICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyYW5zZm9ybWVyXG4iXX0=