'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.build = build;
exports.handle = handle;

var _path = require('path');

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function build(program, dispatch) {
  program.command('build [entry]').description('build a website for this project using our preconfigured webpack bundle').option('--entry <path>', 'relative path to the entry point', './src').option('--entry-name <name>', 'what to name the entry point script', 'app').option('--platform <name>', 'which platform are we building for? electron or web', 'web').option('--external-vendors', "assume vendor libraries will be available to our script").option('--no-vendor-libraries', "don't include any vendor libraries in the bundle").option('--theme <name>', 'the name of the theme to use', 'dashboard').option('--output-folder <path>', 'relative path to the output folder', 'public').option('--html-filename <filename>', 'what should we name the html file?', 'index.html').option('--html-template-path <path>', 'path to the html template to use').option('--precompiled <name>', 'use a precompiled html template which includes vendor libs, themes, etc').option('--push-state', 'use a 200.html file to support push state').option('--content-hash', 'fingerprint the names of the files as a cache busting mechanism', true).option('--dev-tools-path <path>', 'path to the skypager-devpack').action(dispatch(handle));
}

exports.default = build;
function handle(entry) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var context = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  entry = entry || options.entry;
  options.theme = options.theme || project.options.theme || 'default';

  require(pathToDevpack(options.devToolsPath) + '/lib/compiler')(options);
}

function pathToDevpack(opt) {
  return resolve(opt) || process.env.SKYPAGER_DEVPACK_PATH || (0, _path.dirname)(require.resolve('skypager-devpack'));
}

function isDepackInstalled() {
  try {
    return pathToDevpack();
  } catch (error) {
    return false;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvYnVpbGQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFLZ0IsS0FBSyxHQUFMLEtBQUs7UUFzQkwsTUFBTSxHQUFOLE1BQU07Ozs7Ozs7Ozs7Ozs7O0FBdEJmLFNBQVMsS0FBSyxDQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDeEMsU0FBTyxDQUNKLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FDeEIsV0FBVyxDQUFDLHlFQUF5RSxDQUFDLENBQ3RGLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxrQ0FBa0MsRUFBRSxPQUFPLENBQUMsQ0FDckUsTUFBTSxDQUFDLHFCQUFxQixFQUFFLHFDQUFxQyxFQUFFLEtBQUssQ0FBQyxDQUMzRSxNQUFNLENBQUMsbUJBQW1CLEVBQUUscURBQXFELEVBQUUsS0FBSyxDQUFDLENBQ3pGLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSx5REFBeUQsQ0FBQyxDQUN2RixNQUFNLENBQUMsdUJBQXVCLEVBQUUsa0RBQWtELENBQUMsQ0FDbkYsTUFBTSxDQUFDLGdCQUFnQixFQUFFLDhCQUE4QixFQUFFLFdBQVcsQ0FBQyxDQUNyRSxNQUFNLENBQUMsd0JBQXdCLEVBQUUsb0NBQW9DLEVBQUUsUUFBUSxDQUFDLENBQ2hGLE1BQU0sQ0FBQyw0QkFBNEIsRUFBRSxvQ0FBb0MsRUFBRSxZQUFZLENBQUMsQ0FDeEYsTUFBTSxDQUFDLDZCQUE2QixFQUFFLGtDQUFrQyxDQUFDLENBQ3pFLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSx5RUFBeUUsQ0FBQyxDQUN6RyxNQUFNLENBQUMsY0FBYyxFQUFFLDJDQUEyQyxDQUFDLENBQ25FLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxpRUFBaUUsRUFBRSxJQUFJLENBQUMsQ0FDakcsTUFBTSxDQUFDLHlCQUF5QixFQUFFLDhCQUE4QixDQUFDLENBQ2pFLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtDQUM1Qjs7a0JBRWMsS0FBSztBQUViLFNBQVMsTUFBTSxDQUFDLEtBQUssRUFBOEI7TUFBNUIsT0FBTyx5REFBRyxFQUFFO01BQUUsT0FBTyx5REFBRyxFQUFFOztBQUN0RCxPQUFLLEdBQUcsS0FBSyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUE7QUFDOUIsU0FBTyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQTs7QUFFbkUsU0FBTyxDQUFLLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLG1CQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFBO0NBQzFFOztBQUVELFNBQVMsYUFBYSxDQUFFLEdBQUcsRUFBRTtBQUMzQixTQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixJQUFJLFVBbkMvQyxPQUFPLEVBb0NsQixPQUFPLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQ3BDLENBQUE7Q0FDRjs7QUFFRCxTQUFTLGlCQUFpQixHQUFJO0FBQzVCLE1BQUk7QUFDRixXQUFPLGFBQWEsRUFBRSxDQUFBO0dBQ3ZCLENBQUMsT0FBTyxLQUFLLEVBQUU7QUFDZCxXQUFPLEtBQUssQ0FBQTtHQUNiO0NBQ0YiLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqb2luLCBkaXJuYW1lIH0gZnJvbSAncGF0aCdcblxuaW1wb3J0IHNoZWxsIGZyb20gJ3NoZWxsanMnXG5pbXBvcnQgdXRpbCBmcm9tICcuLi91dGlsJ1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGQgKHByb2dyYW0sIGRpc3BhdGNoKSB7XG4gIHByb2dyYW1cbiAgICAuY29tbWFuZCgnYnVpbGQgW2VudHJ5XScpXG4gICAgLmRlc2NyaXB0aW9uKCdidWlsZCBhIHdlYnNpdGUgZm9yIHRoaXMgcHJvamVjdCB1c2luZyBvdXIgcHJlY29uZmlndXJlZCB3ZWJwYWNrIGJ1bmRsZScpXG4gICAgLm9wdGlvbignLS1lbnRyeSA8cGF0aD4nLCAncmVsYXRpdmUgcGF0aCB0byB0aGUgZW50cnkgcG9pbnQnLCAnLi9zcmMnKVxuICAgIC5vcHRpb24oJy0tZW50cnktbmFtZSA8bmFtZT4nLCAnd2hhdCB0byBuYW1lIHRoZSBlbnRyeSBwb2ludCBzY3JpcHQnLCAnYXBwJylcbiAgICAub3B0aW9uKCctLXBsYXRmb3JtIDxuYW1lPicsICd3aGljaCBwbGF0Zm9ybSBhcmUgd2UgYnVpbGRpbmcgZm9yPyBlbGVjdHJvbiBvciB3ZWInLCAnd2ViJylcbiAgICAub3B0aW9uKCctLWV4dGVybmFsLXZlbmRvcnMnLCBcImFzc3VtZSB2ZW5kb3IgbGlicmFyaWVzIHdpbGwgYmUgYXZhaWxhYmxlIHRvIG91ciBzY3JpcHRcIilcbiAgICAub3B0aW9uKCctLW5vLXZlbmRvci1saWJyYXJpZXMnLCBcImRvbid0IGluY2x1ZGUgYW55IHZlbmRvciBsaWJyYXJpZXMgaW4gdGhlIGJ1bmRsZVwiKVxuICAgIC5vcHRpb24oJy0tdGhlbWUgPG5hbWU+JywgJ3RoZSBuYW1lIG9mIHRoZSB0aGVtZSB0byB1c2UnLCAnZGFzaGJvYXJkJylcbiAgICAub3B0aW9uKCctLW91dHB1dC1mb2xkZXIgPHBhdGg+JywgJ3JlbGF0aXZlIHBhdGggdG8gdGhlIG91dHB1dCBmb2xkZXInLCAncHVibGljJylcbiAgICAub3B0aW9uKCctLWh0bWwtZmlsZW5hbWUgPGZpbGVuYW1lPicsICd3aGF0IHNob3VsZCB3ZSBuYW1lIHRoZSBodG1sIGZpbGU/JywgJ2luZGV4Lmh0bWwnKVxuICAgIC5vcHRpb24oJy0taHRtbC10ZW1wbGF0ZS1wYXRoIDxwYXRoPicsICdwYXRoIHRvIHRoZSBodG1sIHRlbXBsYXRlIHRvIHVzZScpXG4gICAgLm9wdGlvbignLS1wcmVjb21waWxlZCA8bmFtZT4nLCAndXNlIGEgcHJlY29tcGlsZWQgaHRtbCB0ZW1wbGF0ZSB3aGljaCBpbmNsdWRlcyB2ZW5kb3IgbGlicywgdGhlbWVzLCBldGMnKVxuICAgIC5vcHRpb24oJy0tcHVzaC1zdGF0ZScsICd1c2UgYSAyMDAuaHRtbCBmaWxlIHRvIHN1cHBvcnQgcHVzaCBzdGF0ZScpXG4gICAgLm9wdGlvbignLS1jb250ZW50LWhhc2gnLCAnZmluZ2VycHJpbnQgdGhlIG5hbWVzIG9mIHRoZSBmaWxlcyBhcyBhIGNhY2hlIGJ1c3RpbmcgbWVjaGFuaXNtJywgdHJ1ZSlcbiAgICAub3B0aW9uKCctLWRldi10b29scy1wYXRoIDxwYXRoPicsICdwYXRoIHRvIHRoZSBza3lwYWdlci1kZXZwYWNrJylcbiAgICAuYWN0aW9uKGRpc3BhdGNoKGhhbmRsZSkpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkXG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGUoZW50cnksIG9wdGlvbnMgPSB7fSwgY29udGV4dCA9IHt9KSB7XG4gIGVudHJ5ID0gZW50cnkgfHwgb3B0aW9ucy5lbnRyeVxuICBvcHRpb25zLnRoZW1lID0gb3B0aW9ucy50aGVtZSB8fCBwcm9qZWN0Lm9wdGlvbnMudGhlbWUgfHwgJ2RlZmF1bHQnXG5cbiAgcmVxdWlyZShgJHsgcGF0aFRvRGV2cGFjayhvcHRpb25zLmRldlRvb2xzUGF0aCkgfS9saWIvY29tcGlsZXJgKShvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBwYXRoVG9EZXZwYWNrIChvcHQpIHtcbiAgcmV0dXJuIHJlc29sdmUob3B0KSB8fCBwcm9jZXNzLmVudi5TS1lQQUdFUl9ERVZQQUNLX1BBVEggfHwgZGlybmFtZShcbiAgICByZXF1aXJlLnJlc29sdmUoJ3NreXBhZ2VyLWRldnBhY2snKVxuICApXG59XG5cbmZ1bmN0aW9uIGlzRGVwYWNrSW5zdGFsbGVkICgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcGF0aFRvRGV2cGFjaygpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cbiJdfQ==