'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.available = available;
exports.handle = handle;

var _util = require('../util');

function available(program, dispatch) {
  program.command('available [helperType]').description('list available helpers in this project').option('--type <helperType>', 'the type of helpers you want to list. valid options are action, context, exporter, importer, model, plugin, renderer, store, view').action(dispatch(handle));
}

exports.default = available;
function handle(type) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var context = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var helperType = type || options.type;
  var project = context.project;

  helperType = (0, _util.pluralize)(helperType).toLowerCase();

  console.log(('Available ' + helperType).green + ':');

  var registry = project.registries[helperType];

  registry.available.sort().forEach(function (val) {
    console.log(val);
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvYXZhaWxhYmxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O1FBRWdCLFNBQVMsR0FBVCxTQUFTO1FBVVQsTUFBTSxHQUFOLE1BQU07Ozs7QUFWZixTQUFTLFNBQVMsQ0FBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQzVDLFNBQU8sQ0FDSixPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FDakMsV0FBVyxDQUFDLHdDQUF3QyxDQUFDLENBQ3JELE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxtSUFBbUksQ0FBQyxDQUNsSyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7Q0FDNUI7O2tCQUVjLFNBQVM7QUFFakIsU0FBUyxNQUFNLENBQUMsSUFBSSxFQUE4QjtNQUE1QixPQUFPLHlEQUFHLEVBQUU7TUFBRSxPQUFPLHlEQUFHLEVBQUU7O0FBQ3JELE1BQUksVUFBVSxHQUFHLElBQUksSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFBO01BQy9CLE9BQU8sR0FBSyxPQUFPLENBQW5CLE9BQU87O0FBRWIsWUFBVSxHQUFHLFVBaEJOLFNBQVMsRUFnQk8sVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7O0FBRWhELFNBQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWMsVUFBVSxFQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQTs7QUFFcEQsTUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQTs7QUFFN0MsVUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLEVBQUk7QUFDdkMsV0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtHQUNqQixDQUFDLENBQUE7Q0FDSCIsImZpbGUiOiJhdmFpbGFibGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwbHVyYWxpemUgfSBmcm9tICcuLi91dGlsJ1xuXG5leHBvcnQgZnVuY3Rpb24gYXZhaWxhYmxlIChwcm9ncmFtLCBkaXNwYXRjaCkge1xuICBwcm9ncmFtXG4gICAgLmNvbW1hbmQoJ2F2YWlsYWJsZSBbaGVscGVyVHlwZV0nKVxuICAgIC5kZXNjcmlwdGlvbignbGlzdCBhdmFpbGFibGUgaGVscGVycyBpbiB0aGlzIHByb2plY3QnKVxuICAgIC5vcHRpb24oJy0tdHlwZSA8aGVscGVyVHlwZT4nLCAndGhlIHR5cGUgb2YgaGVscGVycyB5b3Ugd2FudCB0byBsaXN0LiB2YWxpZCBvcHRpb25zIGFyZSBhY3Rpb24sIGNvbnRleHQsIGV4cG9ydGVyLCBpbXBvcnRlciwgbW9kZWwsIHBsdWdpbiwgcmVuZGVyZXIsIHN0b3JlLCB2aWV3JylcbiAgICAuYWN0aW9uKGRpc3BhdGNoKGhhbmRsZSkpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGF2YWlsYWJsZVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlKHR5cGUsIG9wdGlvbnMgPSB7fSwgY29udGV4dCA9IHt9KSB7XG4gIGxldCBoZWxwZXJUeXBlID0gdHlwZSB8fCBvcHRpb25zLnR5cGVcbiAgbGV0IHsgcHJvamVjdCB9ID0gY29udGV4dFxuXG4gIGhlbHBlclR5cGUgPSBwbHVyYWxpemUoaGVscGVyVHlwZSkudG9Mb3dlckNhc2UoKVxuXG4gIGNvbnNvbGUubG9nKGBBdmFpbGFibGUgJHsgaGVscGVyVHlwZSB9YC5ncmVlbiArICc6JylcblxuICBsZXQgcmVnaXN0cnkgPSBwcm9qZWN0LnJlZ2lzdHJpZXNbaGVscGVyVHlwZV1cblxuICByZWdpc3RyeS5hdmFpbGFibGUuc29ydCgpLmZvckVhY2godmFsID0+IHtcbiAgICBjb25zb2xlLmxvZyh2YWwpXG4gIH0pXG59XG4iXX0=