'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.develop = develop;
exports.handle = handle;
exports.launchWatcher = launchWatcher;
exports.launchServer = launchServer;
exports.launchTunnel = launchTunnel;

var _path = require('path');

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function develop(program, dispatch) {
  program.command('dev [entry]').alias('develop').alias('dev-server').description('run a development server for this project').option('--port <port>', 'which port should this server listen on?', 3000).option('--host <hostname>', 'which hostname should this server listen on?', 'localhost').option('--entry <path>', 'relative path to the entry point', './src').option('--entry-name <name>', 'what to name the entry point script', 'app').option('--platform <name>', 'which platform are we building for? electron or web', 'web').option('--theme <name>', 'the name of the theme to use').option('--html-template-path <path>', 'path to the html template to use').option('--precompiled <name>', 'use a precompiled html template which includes vendor libs, themes, etc').option('--ngrok', 'when enabled, will attempt to use ngrok to expose a public API endpoint for this server').option('--ngrok-config <path>', 'path to a configuration file for the ngrok service').option('--silent', 'suppress any server output').option('--debug', 'show error info from the server').option('--dev-tools-path <path>', 'path to the skypager-devpack devtools library').option('--webpack-config <path>', 'path to a javascript function which can mutate the webpack config').option('--bundle', 'watch for content changes in the project and update the distribution bundle').option('--bundle-command', 'the command to run to generate the bundle default: skypager export bundle', 'skypager export bundle').option('--middleware <path>', 'apply express middleware to the dev-server').option('--modules-path <path>', 'which modules folder to use for webpacks default? defaults to standard node_modules').option('--feature-flags <path>', 'path to a script which exports an object to be used for feature flags').option('--skip-theme', 'do not include a theme').option('--entry-only', 'do not use html template').option('--dist-path <path>', 'the project exporter or dist path').option('--external-vendors', "assume vendor libraries will be available to our script").option('--no-vendor-libraries', "don't include any vendor libraries in the bundle").option('--export-library <name>', 'build this as a umd library').action(dispatch(handle));
}

exports.default = develop;
function handle(entry) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var context = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var project = context.project;

  launchWatcher(options, context);

  launchServer(entry, options, context);

  if (options.ngrok) {
    launchTunnel(options, context);
  }
}

function launchWatcher(options, context) {
  var project = context.project;

  var bundleCommand = options.bundleCommand || 'skypager export bundle';

  console.log('Exporting project bundle'.green);
  _shelljs2.default.exec(bundleCommand + ' --clean');

  console.log('Launching project bundler'.yellow);
  var proc = _shelljs2.default.exec('chokidar \'./{data,docs}/**/*.*\' --silent --ignore --debounce 1200 -c \'' + bundleCommand + '\'', { async: true });

  proc.stdout.on('data', function (data) {
    if (!options.silent) {
      console.log(data);
    }
  });

  proc.stderr.on('data', function (data) {
    if (options.debug) {
      console.log(data);
    }
  });
}

function launchServer(entry) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var context = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var project = context.project;

  options.entry = entry || options.entry || project.options.entry || './src';
  options.theme = options.theme || project.options.theme || 'marketing';

  options.staticAssets = options.staticAssets || project.options.staticAssets || {};

  console.log('Launching server'.cyan);
  process.env.NODE_ENV = 'development';
  require(pathToDevpack(options.devToolsPath) + '/webpack/server')(options);
}

function launchTunnel(options, context) {
  var server = _shelljs2.default.exec('ngrok http ' + (options.port || 3000), { async: true });

  console.log(server);

  server.stdout.on('data', function (data) {
    console.log(data);
  });

  server.stderr.on('data', function (data) {
    console.log(data);
  });

  server.on('end', function () {
    console.log('Ngrok tunnel ended');
  });
}

function pathToDevpack(opt) {
  return opt && (0, _path.resolve)(opt) || process.env.SKYPAGER_DEVPACK_PATH || (0, _path.dirname)(require.resolve('skypager-devpack'));
}

function isDepackInstalled() {
  try {
    return pathToDevpack();
  } catch (error) {
    return false;
  }
}
//# sourceMappingURL=data:application/json;base64,