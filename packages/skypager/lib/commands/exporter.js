'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exporter = exporter;
exports.handle = handle;

var _path = require('path');

var _fs = require('fs');

var _yargs = require('yargs');

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function exporter(program, dispatch) {
  program.command('export <exporter>').description('run one of the project exporters').option('--format <format>', 'which format should the output be serialized in', 'json').option('--output <path>', 'where to save the contents').option('--pretty', 'pretty print the output').option('--stdout', 'write output to stdout').option('--benchmark', 'include benchmarking information').action(dispatch(handle));
}

exports.default = exporter;
function handle(exporterId) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var context = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
  var project = context.project;

  var exporter = project.registries.exporters.lookup(exporterId, false);

  if (!exporter) {
    abort('could not find and exporter named ' + exporterId);
  }

  var params = Object.assign({}, _yargs.argv, { project: project });

  if (options.benchmark) {
    console.time('exporter');
  }

  var payload = project.run.exporter(exporterId, params);

  var output = undefined;

  if (options.format === 'json' && options.pretty) {
    output = JSON.stringify(payload, null, 2);
  } else if (options.format === 'json') {
    output = JSON.stringify(payload);
  } else if (options.format === 'yaml') {
    output = yaml.dump(payload);
  }

  if (options.output) {
    var outputPath = (0, _path.resolve)((0, _path.normalize)(options.output));
    (0, _fs.writeFileSync)(outputPath, output.toString(), 'utf8');
  } else if (options.stdout) {
    console.log(output);
  }

  if (options.benchmark) {
    console.timeEnd('exporter');
  }
}

function abort(message) {
  console.log(message.red);
  process.exit(0);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9leHBvcnRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztRQVFnQixRQUFRLEdBQVIsUUFBUTtRQWNSLE1BQU0sR0FBTixNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFkZixTQUFTLFFBQVEsQ0FBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQzNDLFNBQU8sQ0FDSixPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FDNUIsV0FBVyxDQUFDLGtDQUFrQyxDQUFDLENBQy9DLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxpREFBaUQsRUFBRSxNQUFNLENBQUMsQ0FDdEYsTUFBTSxDQUFDLGlCQUFpQixFQUFFLDRCQUE0QixDQUFDLENBQ3ZELE1BQU0sQ0FBQyxVQUFVLEVBQUUseUJBQXlCLENBQUMsQ0FDN0MsTUFBTSxDQUFDLFVBQVUsRUFBRSx3QkFBd0IsQ0FBQyxDQUM1QyxNQUFNLENBQUMsYUFBYSxFQUFFLGtDQUFrQyxDQUFDLENBQ3pELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtDQUM1Qjs7a0JBRWMsUUFBUTtBQUVoQixTQUFTLE1BQU0sQ0FBRSxVQUFVLEVBQThCO01BQTVCLE9BQU8seURBQUcsRUFBRTtNQUFFLE9BQU8seURBQUcsRUFBRTtNQUNwRCxPQUFPLEdBQUssT0FBTyxDQUFuQixPQUFPOztBQUNmLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUE7O0FBRXZFLE1BQUksQ0FBQyxRQUFRLEVBQUU7QUFDYixTQUFLLHdDQUF1QyxVQUFVLENBQUksQ0FBQTtHQUMzRDs7QUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsU0EzQnhCLElBQUksRUEyQjRCLEVBQUMsT0FBTyxFQUFQLE9BQU8sRUFBQyxDQUFDLENBQUE7O0FBRWpELE1BQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtBQUFFLFdBQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7R0FBRTs7QUFFbkQsTUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFBOztBQUV0RCxNQUFJLE1BQU0sWUFBQSxDQUFBOztBQUVWLE1BQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtBQUM5QyxVQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0dBQzNDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtBQUNuQyxVQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtHQUNsQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUU7QUFDcEMsVUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7R0FDNUI7O0FBRUQsTUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO0FBQ2xCLFFBQUksVUFBVSxHQUFHLFVBL0NOLE9BQU8sRUErQ08sVUEvQ0ksU0FBUyxFQStDSCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtBQUNuRCxZQS9DSyxhQUFhLEVBK0NaLFVBQVUsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUE7R0FDN0MsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7QUFDeEIsV0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtHQUNyQjs7QUFFRCxNQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFBRSxXQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0dBQUU7Q0FDdkQ7O0FBRUQsU0FBUyxLQUFLLENBQUMsT0FBTyxFQUFFO0FBQ3JCLFNBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ3hCLFNBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7Q0FDakIiLCJmaWxlIjoiZXhwb3J0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqb2luLCByZXNvbHZlLCBkaXJuYW1lLCBub3JtYWxpemUsIGV4aXN0c1N5bmMgYXMgZXhpc3RzIH0gZnJvbSAncGF0aCdcbmltcG9ydCB7IHdyaXRlRmlsZVN5bmMgYXMgd3JpdGUsIHN0YXRTeW5jIGFzIHN0YXQgfSBmcm9tICdmcydcblxuaW1wb3J0IHsgYXJndiB9IGZyb20gJ3lhcmdzJ1xuXG5pbXBvcnQgbWtkaXJwIGZyb20gJ21rZGlycCdcbmltcG9ydCBjb2xvcnMgZnJvbSAnY29sb3JzJ1xuXG5leHBvcnQgZnVuY3Rpb24gZXhwb3J0ZXIgKHByb2dyYW0sIGRpc3BhdGNoKSB7XG4gIHByb2dyYW1cbiAgICAuY29tbWFuZCgnZXhwb3J0IDxleHBvcnRlcj4nKVxuICAgIC5kZXNjcmlwdGlvbigncnVuIG9uZSBvZiB0aGUgcHJvamVjdCBleHBvcnRlcnMnKVxuICAgIC5vcHRpb24oJy0tZm9ybWF0IDxmb3JtYXQ+JywgJ3doaWNoIGZvcm1hdCBzaG91bGQgdGhlIG91dHB1dCBiZSBzZXJpYWxpemVkIGluJywgJ2pzb24nKVxuICAgIC5vcHRpb24oJy0tb3V0cHV0IDxwYXRoPicsICd3aGVyZSB0byBzYXZlIHRoZSBjb250ZW50cycpXG4gICAgLm9wdGlvbignLS1wcmV0dHknLCAncHJldHR5IHByaW50IHRoZSBvdXRwdXQnKVxuICAgIC5vcHRpb24oJy0tc3Rkb3V0JywgJ3dyaXRlIG91dHB1dCB0byBzdGRvdXQnKVxuICAgIC5vcHRpb24oJy0tYmVuY2htYXJrJywgJ2luY2x1ZGUgYmVuY2htYXJraW5nIGluZm9ybWF0aW9uJylcbiAgICAuYWN0aW9uKGRpc3BhdGNoKGhhbmRsZSkpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGV4cG9ydGVyXG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGUgKGV4cG9ydGVySWQsIG9wdGlvbnMgPSB7fSwgY29udGV4dCA9IHt9KSB7XG4gIGNvbnN0IHsgcHJvamVjdCB9ID0gY29udGV4dFxuICBjb25zdCBleHBvcnRlciA9IHByb2plY3QucmVnaXN0cmllcy5leHBvcnRlcnMubG9va3VwKGV4cG9ydGVySWQsIGZhbHNlKVxuXG4gIGlmICghZXhwb3J0ZXIpIHtcbiAgICBhYm9ydChgY291bGQgbm90IGZpbmQgYW5kIGV4cG9ydGVyIG5hbWVkICR7IGV4cG9ydGVySWQgfWApXG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBhcmd2LCB7cHJvamVjdH0pXG5cbiAgaWYgKG9wdGlvbnMuYmVuY2htYXJrKSB7IGNvbnNvbGUudGltZSgnZXhwb3J0ZXInKSB9XG5cbiAgbGV0IHBheWxvYWQgPSBwcm9qZWN0LnJ1bi5leHBvcnRlcihleHBvcnRlcklkLCBwYXJhbXMpXG5cbiAgbGV0IG91dHB1dFxuXG4gIGlmIChvcHRpb25zLmZvcm1hdCA9PT0gJ2pzb24nICYmIG9wdGlvbnMucHJldHR5KSB7XG4gICAgIG91dHB1dCA9IEpTT04uc3RyaW5naWZ5KHBheWxvYWQsIG51bGwsIDIpXG4gIH0gZWxzZSBpZiAob3B0aW9ucy5mb3JtYXQgPT09ICdqc29uJykge1xuICAgICBvdXRwdXQgPSBKU09OLnN0cmluZ2lmeShwYXlsb2FkKVxuICB9IGVsc2UgaWYgKG9wdGlvbnMuZm9ybWF0ID09PSAneWFtbCcpIHtcbiAgICBvdXRwdXQgPSB5YW1sLmR1bXAocGF5bG9hZClcbiAgfVxuXG4gIGlmIChvcHRpb25zLm91dHB1dCkge1xuICAgIGxldCBvdXRwdXRQYXRoID0gcmVzb2x2ZShub3JtYWxpemUob3B0aW9ucy5vdXRwdXQpKVxuICAgIHdyaXRlKG91dHB1dFBhdGgsIG91dHB1dC50b1N0cmluZygpLCAndXRmOCcpXG4gIH0gZWxzZSBpZiAob3B0aW9ucy5zdGRvdXQpIHtcbiAgICAgY29uc29sZS5sb2cob3V0cHV0KVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuYmVuY2htYXJrKSB7IGNvbnNvbGUudGltZUVuZCgnZXhwb3J0ZXInKSB9XG59XG5cbmZ1bmN0aW9uIGFib3J0KG1lc3NhZ2UpIHtcbiAgIGNvbnNvbGUubG9nKG1lc3NhZ2UucmVkKVxuICAgcHJvY2Vzcy5leGl0KDApXG59XG4iXX0=