'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exporter = exporter;
exports.handle = handle;

var _path = require('path');

var _fs = require('fs');

var _yargs = require('yargs');

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function exporter(program, dispatch) {
  program.command('export <exporter>').description('run one of the project exporters').option('--format <format>', 'which format should the output be serialized in', 'json').option('--output <path>', 'where to save the contents').option('--pretty', 'pretty print the output').option('--stdout', 'write output to stdout').option('--benchmark', 'include benchmarking information').option('--clean', 'clean or remove previous versions first').action(dispatch(handle));
}

exports.default = exporter;
function handle(exporterId) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var context = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
  var project = context.project;

  var exporter = project.registries.exporters.lookup(exporterId, false);

  if (!exporter) {
    abort('could not find and exporter named ' + exporterId);
  }

  var params = Object.assign({}, _yargs.argv, { project: project });

  if (options.clean && exporterId === 'bundle') {
    require('rimraf').sync(project.path('build', 'bundle'));
  }

  if (options.benchmark) {
    console.time('exporter');
  }

  var payload = project.run.exporter(exporterId, params);

  var output = undefined;

  if (options.format === 'json' && options.pretty) {
    output = JSON.stringify(payload, null, 2);
  } else if (options.format === 'json') {
    output = JSON.stringify(payload);
  } else if (options.format === 'yaml') {
    output = yaml.dump(payload);
  }

  if (options.output) {
    var outputPath = (0, _path.resolve)((0, _path.normalize)(options.output));
    (0, _fs.writeFileSync)(outputPath, output.toString(), 'utf8');
  } else if (options.stdout) {
    console.log(output);
  }

  if (options.benchmark) {
    console.timeEnd('exporter');
  }
}

function abort(message) {
  console.log(message.red);
  process.exit(0);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9leHBvcnRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztRQVFnQixRQUFRLEdBQVIsUUFBUTtRQWVSLE1BQU0sR0FBTixNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFmZixTQUFTLFFBQVEsQ0FBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQzNDLFNBQU8sQ0FDSixPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FDNUIsV0FBVyxDQUFDLGtDQUFrQyxDQUFDLENBQy9DLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxpREFBaUQsRUFBRSxNQUFNLENBQUMsQ0FDdEYsTUFBTSxDQUFDLGlCQUFpQixFQUFFLDRCQUE0QixDQUFDLENBQ3ZELE1BQU0sQ0FBQyxVQUFVLEVBQUUseUJBQXlCLENBQUMsQ0FDN0MsTUFBTSxDQUFDLFVBQVUsRUFBRSx3QkFBd0IsQ0FBQyxDQUM1QyxNQUFNLENBQUMsYUFBYSxFQUFFLGtDQUFrQyxDQUFDLENBQ3pELE1BQU0sQ0FBQyxTQUFTLEVBQUUseUNBQXlDLENBQUMsQ0FDNUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0NBQzVCOztrQkFFYyxRQUFRO0FBRWhCLFNBQVMsTUFBTSxDQUFFLFVBQVUsRUFBOEI7TUFBNUIsT0FBTyx5REFBRyxFQUFFO01BQUUsT0FBTyx5REFBRyxFQUFFO01BQ3BELE9BQU8sR0FBSyxPQUFPLENBQW5CLE9BQU87O0FBQ2YsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQTs7QUFFdkUsTUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNiLFNBQUssd0NBQXVDLFVBQVUsQ0FBSSxDQUFBO0dBQzNEOztBQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxTQTVCeEIsSUFBSSxFQTRCNEIsRUFBQyxPQUFPLEVBQVAsT0FBTyxFQUFDLENBQUMsQ0FBQTs7QUFFakQsTUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLFVBQVUsS0FBSyxRQUFRLEVBQUU7QUFDM0MsV0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsUUFBUSxDQUFDLENBQy9CLENBQUE7R0FDSDs7QUFFRCxNQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFBRSxXQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0dBQUU7O0FBRW5ELE1BQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQTs7QUFFdEQsTUFBSSxNQUFNLFlBQUEsQ0FBQTs7QUFFVixNQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7QUFDOUMsVUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtHQUMzQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUU7QUFDbkMsVUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7R0FDbEMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFFO0FBQ3BDLFVBQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0dBQzVCOztBQUVELE1BQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtBQUNsQixRQUFJLFVBQVUsR0FBRyxVQXRETixPQUFPLEVBc0RPLFVBdERJLFNBQVMsRUFzREgsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7QUFDbkQsWUF0REssYUFBYSxFQXNEWixVQUFVLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0dBQzdDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO0FBQ3hCLFdBQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7R0FDckI7O0FBR0QsTUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO0FBQUUsV0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtHQUFFO0NBQ3ZEOztBQUVELFNBQVMsS0FBSyxDQUFDLE9BQU8sRUFBRTtBQUNyQixTQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUN4QixTQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0NBQ2pCIiwiZmlsZSI6ImV4cG9ydGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiwgcmVzb2x2ZSwgZGlybmFtZSwgbm9ybWFsaXplLCBleGlzdHNTeW5jIGFzIGV4aXN0cyB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgeyB3cml0ZUZpbGVTeW5jIGFzIHdyaXRlLCBzdGF0U3luYyBhcyBzdGF0IH0gZnJvbSAnZnMnXG5cbmltcG9ydCB7IGFyZ3YgfSBmcm9tICd5YXJncydcblxuaW1wb3J0IG1rZGlycCBmcm9tICdta2RpcnAnXG5pbXBvcnQgY29sb3JzIGZyb20gJ2NvbG9ycydcblxuZXhwb3J0IGZ1bmN0aW9uIGV4cG9ydGVyIChwcm9ncmFtLCBkaXNwYXRjaCkge1xuICBwcm9ncmFtXG4gICAgLmNvbW1hbmQoJ2V4cG9ydCA8ZXhwb3J0ZXI+JylcbiAgICAuZGVzY3JpcHRpb24oJ3J1biBvbmUgb2YgdGhlIHByb2plY3QgZXhwb3J0ZXJzJylcbiAgICAub3B0aW9uKCctLWZvcm1hdCA8Zm9ybWF0PicsICd3aGljaCBmb3JtYXQgc2hvdWxkIHRoZSBvdXRwdXQgYmUgc2VyaWFsaXplZCBpbicsICdqc29uJylcbiAgICAub3B0aW9uKCctLW91dHB1dCA8cGF0aD4nLCAnd2hlcmUgdG8gc2F2ZSB0aGUgY29udGVudHMnKVxuICAgIC5vcHRpb24oJy0tcHJldHR5JywgJ3ByZXR0eSBwcmludCB0aGUgb3V0cHV0JylcbiAgICAub3B0aW9uKCctLXN0ZG91dCcsICd3cml0ZSBvdXRwdXQgdG8gc3Rkb3V0JylcbiAgICAub3B0aW9uKCctLWJlbmNobWFyaycsICdpbmNsdWRlIGJlbmNobWFya2luZyBpbmZvcm1hdGlvbicpXG4gICAgLm9wdGlvbignLS1jbGVhbicsICdjbGVhbiBvciByZW1vdmUgcHJldmlvdXMgdmVyc2lvbnMgZmlyc3QnKVxuICAgIC5hY3Rpb24oZGlzcGF0Y2goaGFuZGxlKSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0ZXJcblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZSAoZXhwb3J0ZXJJZCwgb3B0aW9ucyA9IHt9LCBjb250ZXh0ID0ge30pIHtcbiAgY29uc3QgeyBwcm9qZWN0IH0gPSBjb250ZXh0XG4gIGNvbnN0IGV4cG9ydGVyID0gcHJvamVjdC5yZWdpc3RyaWVzLmV4cG9ydGVycy5sb29rdXAoZXhwb3J0ZXJJZCwgZmFsc2UpXG5cbiAgaWYgKCFleHBvcnRlcikge1xuICAgIGFib3J0KGBjb3VsZCBub3QgZmluZCBhbmQgZXhwb3J0ZXIgbmFtZWQgJHsgZXhwb3J0ZXJJZCB9YClcbiAgfVxuXG4gIGNvbnN0IHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIGFyZ3YsIHtwcm9qZWN0fSlcblxuICBpZiAob3B0aW9ucy5jbGVhbiAmJiBleHBvcnRlcklkID09PSAnYnVuZGxlJykge1xuICAgICByZXF1aXJlKCdyaW1yYWYnKS5zeW5jKFxuICAgICAgIHByb2plY3QucGF0aCgnYnVpbGQnLCdidW5kbGUnKVxuICAgICApXG4gIH1cblxuICBpZiAob3B0aW9ucy5iZW5jaG1hcmspIHsgY29uc29sZS50aW1lKCdleHBvcnRlcicpIH1cblxuICBsZXQgcGF5bG9hZCA9IHByb2plY3QucnVuLmV4cG9ydGVyKGV4cG9ydGVySWQsIHBhcmFtcylcblxuICBsZXQgb3V0cHV0XG5cbiAgaWYgKG9wdGlvbnMuZm9ybWF0ID09PSAnanNvbicgJiYgb3B0aW9ucy5wcmV0dHkpIHtcbiAgICAgb3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCwgbnVsbCwgMilcbiAgfSBlbHNlIGlmIChvcHRpb25zLmZvcm1hdCA9PT0gJ2pzb24nKSB7XG4gICAgIG91dHB1dCA9IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXG4gIH0gZWxzZSBpZiAob3B0aW9ucy5mb3JtYXQgPT09ICd5YW1sJykge1xuICAgIG91dHB1dCA9IHlhbWwuZHVtcChwYXlsb2FkKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMub3V0cHV0KSB7XG4gICAgbGV0IG91dHB1dFBhdGggPSByZXNvbHZlKG5vcm1hbGl6ZShvcHRpb25zLm91dHB1dCkpXG4gICAgd3JpdGUob3V0cHV0UGF0aCwgb3V0cHV0LnRvU3RyaW5nKCksICd1dGY4JylcbiAgfSBlbHNlIGlmIChvcHRpb25zLnN0ZG91dCkge1xuICAgICBjb25zb2xlLmxvZyhvdXRwdXQpXG4gIH1cblxuXG4gIGlmIChvcHRpb25zLmJlbmNobWFyaykgeyBjb25zb2xlLnRpbWVFbmQoJ2V4cG9ydGVyJykgfVxufVxuXG5mdW5jdGlvbiBhYm9ydChtZXNzYWdlKSB7XG4gICBjb25zb2xlLmxvZyhtZXNzYWdlLnJlZClcbiAgIHByb2Nlc3MuZXhpdCgwKVxufVxuIl19