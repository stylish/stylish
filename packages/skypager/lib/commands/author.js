'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.author = author;
exports.handle = handle;

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function author(program, dispatch) {
  program.command('author').description('run the author app').option('--main <url>', 'the url to open by default').option('--port <port>', 'which port to launch the dev server', '3000').option('--server-cmd <command>', 'which command should launch the server?').action(dispatch(handle));
}

exports.default = author;
function handle() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var context = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var project = context.project;

  var electron = isElectronInstalled();
  var skypagerElectron = isSkypagerElectronInstalled();

  if (!electron) {
    console.log('Please install the electron-prebuilt package'.red);
    process.exit(1);
  }

  if (!skypagerElectron) {
    console.log('Please install the skypager-electron package'.red);
    process.exit(1);
  }

  var proc = require('child_process').spawn(electron, [skypagerElectron].concat(process.argv.slice(2)));

  proc.stdout.on('data', function (data) {
    return console.log(data.toString());
  });
  proc.stderr.on('data', function (data) {
    return console.log(data.toString());
  });
}

function isSkypagerElectronInstalled() {
  try {
    return require('path').dirname(require.resolve('skypager-electron'));
  } catch (error) {
    return false;
  }
}

function isElectronInstalled() {
  try {
    return require('electron-prebuilt');
  } catch (error) {
    console.log('Error!', error.message);
    return false;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9hdXRob3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFFZ0IsTUFBTSxHQUFOLE1BQU07UUFZTixNQUFNLEdBQU4sTUFBTTs7Ozs7Ozs7QUFaZixTQUFTLE1BQU0sQ0FBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQ3pDLFNBQU8sQ0FDSixPQUFPLENBQUMsUUFBUSxDQUFDLENBQ2pCLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUNqQyxNQUFNLENBQUMsY0FBYyxFQUFFLDRCQUE0QixDQUFDLENBQ3BELE1BQU0sQ0FBQyxlQUFlLEVBQUUscUNBQXFDLEVBQUUsTUFBTSxDQUFDLENBQ3RFLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRSx5Q0FBeUMsQ0FBQyxDQUMzRSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7Q0FDNUI7O2tCQUVjLE1BQU07QUFFZCxTQUFTLE1BQU0sR0FBNkI7TUFBNUIsT0FBTyx5REFBRyxFQUFFO01BQUUsT0FBTyx5REFBRyxFQUFFO01BQ3pDLE9BQU8sR0FBSyxPQUFPLENBQW5CLE9BQU87O0FBRWIsTUFBSSxRQUFRLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQTtBQUNwQyxNQUFJLGdCQUFnQixHQUFHLDJCQUEyQixFQUFFLENBQUE7O0FBRXBELE1BQUksQ0FBQyxRQUFRLEVBQUU7QUFDYixXQUFPLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQy9ELFdBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FDaEI7O0FBRUQsTUFBSSxDQUFDLGdCQUFnQixFQUFFO0FBQ3JCLFdBQU8sQ0FBQyxHQUFHLENBQUMsOENBQThDLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDL0QsV0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUNoQjs7QUFFRCxNQUFJLElBQUksR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxDQUN2QyxRQUFRLEVBQ1IsQ0FBRSxnQkFBZ0IsQ0FBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNuRCxDQUFBOztBQUVELE1BQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDLElBQUk7V0FBSyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUFBLENBQUMsQ0FBQTtBQUM5RCxNQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBQyxJQUFJO1dBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7R0FBQSxDQUFDLENBQUE7Q0FDL0Q7O0FBRUQsU0FBUywyQkFBMkIsR0FBSTtBQUN0QyxNQUFJO0FBQ0YsV0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFBO0dBQ3JFLENBQUMsT0FBTyxLQUFLLEVBQUU7QUFDYixXQUFPLEtBQUssQ0FBQTtHQUNkO0NBQ0Y7O0FBRUQsU0FBUyxtQkFBbUIsR0FBSTtBQUM5QixNQUFJO0FBQ0YsV0FBTyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtHQUNwQyxDQUFDLE9BQU8sS0FBSyxFQUFFO0FBQ2QsV0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ25DLFdBQU8sS0FBSyxDQUFBO0dBQ2Q7Q0FDRiIsImZpbGUiOiJhdXRob3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gJ2NvbG9ycydcblxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhvciAocHJvZ3JhbSwgZGlzcGF0Y2gpIHtcbiAgcHJvZ3JhbVxuICAgIC5jb21tYW5kKCdhdXRob3InKVxuICAgIC5kZXNjcmlwdGlvbigncnVuIHRoZSBhdXRob3IgYXBwJylcbiAgICAub3B0aW9uKCctLW1haW4gPHVybD4nLCAndGhlIHVybCB0byBvcGVuIGJ5IGRlZmF1bHQnKVxuICAgIC5vcHRpb24oJy0tcG9ydCA8cG9ydD4nLCAnd2hpY2ggcG9ydCB0byBsYXVuY2ggdGhlIGRldiBzZXJ2ZXInLCAnMzAwMCcpXG4gICAgLm9wdGlvbignLS1zZXJ2ZXItY21kIDxjb21tYW5kPicsICd3aGljaCBjb21tYW5kIHNob3VsZCBsYXVuY2ggdGhlIHNlcnZlcj8nKVxuICAgIC5hY3Rpb24oZGlzcGF0Y2goaGFuZGxlKSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXV0aG9yXG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGUob3B0aW9ucyA9IHt9LCBjb250ZXh0ID0ge30pIHtcbiAgbGV0IHsgcHJvamVjdCB9ID0gY29udGV4dFxuXG4gIGxldCBlbGVjdHJvbiA9IGlzRWxlY3Ryb25JbnN0YWxsZWQoKVxuICBsZXQgc2t5cGFnZXJFbGVjdHJvbiA9IGlzU2t5cGFnZXJFbGVjdHJvbkluc3RhbGxlZCgpXG5cbiAgaWYgKCFlbGVjdHJvbikge1xuICAgIGNvbnNvbGUubG9nKCdQbGVhc2UgaW5zdGFsbCB0aGUgZWxlY3Ryb24tcHJlYnVpbHQgcGFja2FnZScucmVkKVxuICAgIHByb2Nlc3MuZXhpdCgxKVxuICB9XG5cbiAgaWYgKCFza3lwYWdlckVsZWN0cm9uKSB7XG4gICAgY29uc29sZS5sb2coJ1BsZWFzZSBpbnN0YWxsIHRoZSBza3lwYWdlci1lbGVjdHJvbiBwYWNrYWdlJy5yZWQpXG4gICAgcHJvY2Vzcy5leGl0KDEpXG4gIH1cblxuICBsZXQgcHJvYyA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKS5zcGF3bihcbiAgICBlbGVjdHJvbixcbiAgICBbIHNreXBhZ2VyRWxlY3Ryb24gXS5jb25jYXQocHJvY2Vzcy5hcmd2LnNsaWNlKDIpKVxuICApXG5cbiAgcHJvYy5zdGRvdXQub24oJ2RhdGEnLCAoZGF0YSkgPT4gY29uc29sZS5sb2coZGF0YS50b1N0cmluZygpKSlcbiAgcHJvYy5zdGRlcnIub24oJ2RhdGEnLCAoZGF0YSkgPT4gY29uc29sZS5sb2coZGF0YS50b1N0cmluZygpKSlcbn1cblxuZnVuY3Rpb24gaXNTa3lwYWdlckVsZWN0cm9uSW5zdGFsbGVkICgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZSgncGF0aCcpLmRpcm5hbWUocmVxdWlyZS5yZXNvbHZlKCdza3lwYWdlci1lbGVjdHJvbicpKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0VsZWN0cm9uSW5zdGFsbGVkICgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnZWxlY3Ryb24tcHJlYnVpbHQnKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKCdFcnJvciEnLCBlcnJvci5tZXNzYWdlKVxuICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuIl19